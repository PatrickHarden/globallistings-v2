{"ast":null,"code":"import { normalize, schema } from 'normalizr';\nimport { compose, pickBy, isNil } from 'ramda';\nimport { docToProperty } from './doc-to-property-mapper';\nvar removeUndefinedPropsFromObj = pickBy(function (val, _) {\n  return !isNil(val);\n});\n\nvar getProperties = function getProperties(response) {\n  return response.Documents[0];\n};\n\nvar mapProperties = function mapProperties(locale) {\n  return function (docs) {\n    return docs.map(function (d) {\n      return docToProperty(locale)(d);\n    }).filter(function (d) {\n      return !!d;\n    }).map(removeUndefinedPropsFromObj);\n  };\n};\n\nexport var normaliseApiResponse = function normaliseApiResponse(locale) {\n  return function (data) {\n    var properties = compose(mapProperties(locale), getProperties)(data);\n    var propertySchema = new schema.Entity('properties');\n    var propertiesSchema = new schema.Array(propertySchema);\n    return normalize(properties, propertiesSchema);\n  };\n};\nexport var normaliseAutocompleteResponse = function normaliseAutocompleteResponse(data) {\n  var suggestionsEntitySchema = new schema.Entity('suggestions', {}, {\n    idAttribute: 'placeId'\n  });\n  var suggestionsSchema = new schema.Array(suggestionsEntitySchema);\n  return normalize(data, suggestionsSchema);\n};\nexport var normaliseSearchResponse = function normaliseSearchResponse(config) {\n  return function (documents) {\n    var suggestions = documents.map(function (document) {\n      var primaryKey = document['Common.PrimaryKey'];\n      var aspects = document['Common.Aspects'];\n      var usageType = document['Common.UsageType'];\n      var searchPath = config.SearchPaths.find(function (path) {\n        return path.label === usageType;\n      });\n      var display = searchPath.display || usageType;\n      var suggestion = {\n        description: \"\".concat(primaryKey, \" (\").concat(display, \")\"),\n        placeId: \"\".concat(primaryKey),\n        propertyResult: {\n          propertyPartialPath: \"\".concat(primaryKey),\n          propertyAspects: aspects,\n          searchPath: \"\".concat(searchPath.value)\n        }\n      };\n      return suggestion;\n    });\n    return suggestions;\n  };\n};","map":{"version":3,"names":["normalize","schema","compose","pickBy","isNil","docToProperty","removeUndefinedPropsFromObj","val","_","getProperties","response","Documents","mapProperties","locale","docs","map","d","filter","normaliseApiResponse","data","properties","propertySchema","Entity","propertiesSchema","Array","normaliseAutocompleteResponse","suggestionsEntitySchema","idAttribute","suggestionsSchema","normaliseSearchResponse","config","documents","suggestions","document","primaryKey","aspects","usageType","searchPath","SearchPaths","find","path","label","display","suggestion","description","placeId","propertyResult","propertyPartialPath","propertyAspects","value"],"sources":["/Users/zentoo/Code/v2/src/api/normalisers/index.ts"],"sourcesContent":["import { normalize, schema } from 'normalizr';\nimport { NormalisedSearchResult } from '../../types/results';\n\nimport { PropertySearchConfig } from '../../redux/selectors/config/autocomplete-config';\n\nimport { compose, pickBy, isNil } from 'ramda';\nimport { docToProperty } from './doc-to-property-mapper';\nimport {\n  NormalisedAutocompleteResult,\n  Autocomplete,\n  PropertyResult,\n} from '../../types/autocomplete';\nimport { SearchPath } from '../../types/config';\n\nconst removeUndefinedPropsFromObj = pickBy((val, _) => !isNil(val));\n\nconst getProperties = (response: SearchResultsResponse) => response.Documents[0];\n\nconst mapProperties = (locale: string) => (docs: Document[]) =>\n  docs\n    .map(d => docToProperty(locale)(d))\n    .filter(d => !!d)\n    .map(removeUndefinedPropsFromObj);\n\nexport const normaliseApiResponse = (locale: string) => (\n  data: SearchResultsResponse\n): NormalisedSearchResult => {\n  const properties = compose(\n    mapProperties(locale),\n    getProperties\n  )(data);\n\n  const propertySchema = new schema.Entity('properties');\n  const propertiesSchema = new schema.Array(propertySchema);\n\n  return normalize(properties, propertiesSchema);\n};\n\nexport const normaliseAutocompleteResponse = (\n  data: Autocomplete[]\n): NormalisedAutocompleteResult => {\n  const suggestionsEntitySchema = new schema.Entity('suggestions', {}, { idAttribute: 'placeId' });\n  const suggestionsSchema = new schema.Array(suggestionsEntitySchema);\n\n  return normalize(data, suggestionsSchema);\n};\n\nexport const normaliseSearchResponse = (config: PropertySearchConfig) => (\n  documents: any\n): Autocomplete[] => {\n  const suggestions: Autocomplete[] = documents.map((document: any) => {\n    const primaryKey = document['Common.PrimaryKey'];\n    const aspects = document['Common.Aspects'];\n    const usageType = document['Common.UsageType'];\n\n    const searchPath = config.SearchPaths!.find(path => path.label === usageType);\n\n    const display = searchPath!.display || usageType;\n\n    var suggestion = {\n      description: `${primaryKey} (${display})`,\n      placeId: `${primaryKey}`,\n      propertyResult: {\n        propertyPartialPath: `${primaryKey}`,\n        propertyAspects: aspects,\n        searchPath: `${searchPath!.value}`,\n      },\n    };\n    return suggestion;\n  });\n\n  return suggestions;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}