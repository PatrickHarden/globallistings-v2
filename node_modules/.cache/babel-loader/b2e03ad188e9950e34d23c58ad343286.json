{"ast":null,"code":"export var mapSize = function mapSize(p, intl, isCommercial) {\n  if (!isCommercial) {\n    switch (p.numberOfBedrooms) {\n      case 0:\n        return intl.formatMessage({\n          id: 'Studio'\n        });\n\n      case 1:\n        return intl.formatMessage({\n          id: 'NumberOfBedroomsSingular'\n        }, {\n          bedroomCount: p.numberOfBedrooms\n        });\n\n      default:\n        return intl.formatMessage({\n          id: 'NumberOfBedroomsPlural'\n        }, {\n          bedroomCount: p.numberOfBedrooms\n        });\n    }\n  }\n\n  if (!p.size) {\n    console.warn(\"Commercial property \".concat(p.id, \" has to have size defined\"));\n    return undefined;\n  }\n\n  var _p$size = p.size,\n      min = _p$size.min,\n      max = _p$size.max;\n\n  if (max.amount === min.amount) {\n    return intl.formatMessage({\n      id: 'PropertySize'\n    }, {\n      size: min.amount,\n      unit: min.units\n    });\n  }\n\n  return intl.formatMessage({\n    id: 'PropertySizeRange'\n  }, {\n    minimumSize: min.amount,\n    totalSize: max.amount,\n    unit: min.units\n  });\n};","map":{"version":3,"names":["mapSize","p","intl","isCommercial","numberOfBedrooms","formatMessage","id","bedroomCount","size","console","warn","undefined","min","max","amount","unit","units","minimumSize","totalSize"],"sources":["/Users/zentoo/Code/v2/src/utils/propertyData/mapSize.ts"],"sourcesContent":["import { InjectedIntl } from 'react-intl';\n\nimport { Maybe } from '../../types/common/maybe';\nimport { Property } from '../../types/property';\n\nexport const mapSize = (p: Property, intl: InjectedIntl, isCommercial: boolean): Maybe<string> => {\n  if (!isCommercial) {\n    switch (p.numberOfBedrooms) {\n      case 0:\n        return intl.formatMessage({ id: 'Studio' });\n      case 1:\n        return intl.formatMessage(\n          { id: 'NumberOfBedroomsSingular' },\n          { bedroomCount: p.numberOfBedrooms }\n        );\n      default:\n        return intl.formatMessage(\n          { id: 'NumberOfBedroomsPlural' },\n          { bedroomCount: p.numberOfBedrooms }\n        );\n    }\n  }\n\n  if (!p.size) {\n    console.warn(`Commercial property ${p.id} has to have size defined`);\n    return undefined;\n  }\n\n  const { min, max } = p.size;\n\n  if (max.amount === min.amount) {\n    return intl.formatMessage({ id: 'PropertySize' }, { size: min.amount, unit: min.units });\n  }\n\n  return intl.formatMessage(\n    { id: 'PropertySizeRange' },\n    {\n      minimumSize: min.amount,\n      totalSize: max.amount,\n      unit: min.units,\n    }\n  );\n};\n"],"mappings":"AAKA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD,EAAcC,IAAd,EAAkCC,YAAlC,EAA2E;EAChG,IAAI,CAACA,YAAL,EAAmB;IACjB,QAAQF,CAAC,CAACG,gBAAV;MACE,KAAK,CAAL;QACE,OAAOF,IAAI,CAACG,aAAL,CAAmB;UAAEC,EAAE,EAAE;QAAN,CAAnB,CAAP;;MACF,KAAK,CAAL;QACE,OAAOJ,IAAI,CAACG,aAAL,CACL;UAAEC,EAAE,EAAE;QAAN,CADK,EAEL;UAAEC,YAAY,EAAEN,CAAC,CAACG;QAAlB,CAFK,CAAP;;MAIF;QACE,OAAOF,IAAI,CAACG,aAAL,CACL;UAAEC,EAAE,EAAE;QAAN,CADK,EAEL;UAAEC,YAAY,EAAEN,CAAC,CAACG;QAAlB,CAFK,CAAP;IATJ;EAcD;;EAED,IAAI,CAACH,CAAC,CAACO,IAAP,EAAa;IACXC,OAAO,CAACC,IAAR,+BAAoCT,CAAC,CAACK,EAAtC;IACA,OAAOK,SAAP;EACD;;EArB+F,cAuB3EV,CAAC,CAACO,IAvByE;EAAA,IAuBxFI,GAvBwF,WAuBxFA,GAvBwF;EAAA,IAuBnFC,GAvBmF,WAuBnFA,GAvBmF;;EAyBhG,IAAIA,GAAG,CAACC,MAAJ,KAAeF,GAAG,CAACE,MAAvB,EAA+B;IAC7B,OAAOZ,IAAI,CAACG,aAAL,CAAmB;MAAEC,EAAE,EAAE;IAAN,CAAnB,EAA2C;MAAEE,IAAI,EAAEI,GAAG,CAACE,MAAZ;MAAoBC,IAAI,EAAEH,GAAG,CAACI;IAA9B,CAA3C,CAAP;EACD;;EAED,OAAOd,IAAI,CAACG,aAAL,CACL;IAAEC,EAAE,EAAE;EAAN,CADK,EAEL;IACEW,WAAW,EAAEL,GAAG,CAACE,MADnB;IAEEI,SAAS,EAAEL,GAAG,CAACC,MAFjB;IAGEC,IAAI,EAAEH,GAAG,CAACI;EAHZ,CAFK,CAAP;AAQD,CArCM"},"metadata":{},"sourceType":"module"}