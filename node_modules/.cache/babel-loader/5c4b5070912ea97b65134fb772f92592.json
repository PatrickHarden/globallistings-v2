{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { propertiesSelector } from './state';\nimport { intlSelector } from './intl';\nimport { notEmpty } from '../../types/common/notEmpty';\nimport { propertySearchSelector, usageTypeSelector } from './plp';\nimport { selectedPropertyPinSelector, highlightedPropertySelector } from './ui';\nimport { plpTransactionTypeSelector } from './location';\nimport { mapAddress } from '../../utils/propertyData/mapAddress';\nimport { mapImage } from '../../utils/propertyData/mapImage';\nimport { mapPrice } from '../../utils/propertyData/mapPrice';\nimport { mapSize } from '../../utils/propertyData/mapSize';\nimport { capitalise } from '../../utils/capitalise';\n// TODO update to a real one\nexport var isCommercialSelector = function isCommercialSelector() {\n  return true;\n};\n\nvar toPropertyOverview = function toPropertyOverview(intl, isCommercial, selectedPropertyId, highlightedPropertyId) {\n  return function (p, i) {\n    return {\n      address: mapAddress(p, intl),\n      imgUrl: mapImage(p),\n      price: mapPrice(p, intl),\n      size: mapSize(p, intl, isCommercial),\n      location: p.location,\n      id: p.id,\n      // Selected poperty = currently highlighted (mouseover list), selected (pin clicked) or first in array\n      selected: highlightedPropertyId ? highlightedPropertyId === p.id : selectedPropertyId === p.id || i === 0\n    };\n  };\n};\n\nexport var propertiesSearchResultsSelector = createSelector(propertiesSelector, propertySearchSelector, intlSelector, isCommercialSelector, selectedPropertyPinSelector, highlightedPropertySelector, function (properties, propertySearch, intl, isCommercial, selectedPropertyId, highlightedPropertyId) {\n  return propertySearch.map(function (p) {\n    return properties[p];\n  }).filter(notEmpty).map(toPropertyOverview(intl, isCommercial, selectedPropertyId, highlightedPropertyId));\n});\nexport var resultCountSelector = createSelector(propertiesSearchResultsSelector, usageTypeSelector, plpTransactionTypeSelector, intlSelector, function (results, usage, transaction, _ref) {\n  var formatMessage = _ref.formatMessage;\n  return formatMessage({\n    id: 'PropertiesFound'\n  }, {\n    propertyCount: results.length,\n    propertyTypePlural: formatMessage({\n      id: \"PDPPluralPropertyType\".concat(capitalise(usage))\n    }).toLocaleLowerCase(),\n    searchType: formatMessage({\n      id: transaction === 'sale' ? 'saleSearchType' : 'letSearchType'\n    })\n  });\n});","map":{"version":3,"names":["createSelector","propertiesSelector","intlSelector","notEmpty","propertySearchSelector","usageTypeSelector","selectedPropertyPinSelector","highlightedPropertySelector","plpTransactionTypeSelector","mapAddress","mapImage","mapPrice","mapSize","capitalise","isCommercialSelector","toPropertyOverview","intl","isCommercial","selectedPropertyId","highlightedPropertyId","p","i","address","imgUrl","price","size","location","id","selected","propertiesSearchResultsSelector","properties","propertySearch","map","filter","resultCountSelector","results","usage","transaction","formatMessage","propertyCount","length","propertyTypePlural","toLocaleLowerCase","searchType"],"sources":["/Users/zentoo/Code/v2/src/redux/selectors/property-search-results.ts"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { InjectedIntl } from 'react-intl';\nimport { propertiesSelector } from './state';\nimport { intlSelector } from './intl';\nimport { notEmpty } from '../../types/common/notEmpty';\nimport { Location, Property } from '../../types/property';\nimport { propertySearchSelector, usageTypeSelector } from './plp';\nimport { selectedPropertyPinSelector, highlightedPropertySelector } from './ui';\nimport { plpTransactionTypeSelector } from './location';\n\nimport { mapAddress } from '../../utils/propertyData/mapAddress';\nimport { mapImage } from '../../utils/propertyData/mapImage';\nimport { mapPrice } from '../../utils/propertyData/mapPrice';\nimport { mapSize } from '../../utils/propertyData/mapSize';\nimport { capitalise } from '../../utils/capitalise';\n\nexport interface PropertyOverview {\n  readonly imgUrl: string;\n  readonly price?: string;\n  readonly size?: string;\n  readonly address: string;\n  readonly location: Location;\n  readonly id: string;\n  readonly selected: boolean;\n}\n\n// TODO update to a real one\nexport const isCommercialSelector = () => true;\n\nconst toPropertyOverview = (\n  intl: InjectedIntl,\n  isCommercial: boolean,\n  selectedPropertyId: string,\n  highlightedPropertyId: string\n) => (p: Property, i: Number): PropertyOverview => ({\n  address: mapAddress(p, intl),\n  imgUrl: mapImage(p),\n  price: mapPrice(p, intl),\n  size: mapSize(p, intl, isCommercial),\n  location: p.location,\n  id: p.id,\n  // Selected poperty = currently highlighted (mouseover list), selected (pin clicked) or first in array\n  selected: highlightedPropertyId\n    ? highlightedPropertyId === p.id\n    : selectedPropertyId === p.id || i === 0,\n});\n\nexport const propertiesSearchResultsSelector = createSelector(\n  propertiesSelector,\n  propertySearchSelector,\n  intlSelector,\n  isCommercialSelector,\n  selectedPropertyPinSelector,\n  highlightedPropertySelector,\n  (properties, propertySearch, intl, isCommercial, selectedPropertyId, highlightedPropertyId) => {\n    return propertySearch\n      .map(p => properties[p])\n      .filter(notEmpty)\n      .map(toPropertyOverview(intl, isCommercial, selectedPropertyId, highlightedPropertyId));\n  }\n);\n\nexport const resultCountSelector = createSelector(\n  propertiesSearchResultsSelector,\n  usageTypeSelector,\n  plpTransactionTypeSelector,\n  intlSelector,\n  (results, usage, transaction, { formatMessage }) =>\n    formatMessage(\n      { id: 'PropertiesFound' },\n      {\n        propertyCount: results.length,\n        propertyTypePlural: formatMessage({\n          id: `PDPPluralPropertyType${capitalise(usage)}`,\n        }).toLocaleLowerCase(),\n        searchType: formatMessage({\n          id: transaction === 'sale' ? 'saleSearchType' : 'letSearchType',\n        }),\n      }\n    )\n);\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AAEA,SAASC,sBAAT,EAAiCC,iBAAjC,QAA0D,OAA1D;AACA,SAASC,2BAAT,EAAsCC,2BAAtC,QAAyE,MAAzE;AACA,SAASC,0BAAT,QAA2C,YAA3C;AAEA,SAASC,UAAT,QAA2B,qCAA3B;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAYA;AACA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;EAAA,OAAM,IAAN;AAAA,CAA7B;;AAEP,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CACzBC,IADyB,EAEzBC,YAFyB,EAGzBC,kBAHyB,EAIzBC,qBAJyB;EAAA,OAKtB,UAACC,CAAD,EAAcC,CAAd;IAAA,OAA+C;MAClDC,OAAO,EAAEb,UAAU,CAACW,CAAD,EAAIJ,IAAJ,CAD+B;MAElDO,MAAM,EAAEb,QAAQ,CAACU,CAAD,CAFkC;MAGlDI,KAAK,EAAEb,QAAQ,CAACS,CAAD,EAAIJ,IAAJ,CAHmC;MAIlDS,IAAI,EAAEb,OAAO,CAACQ,CAAD,EAAIJ,IAAJ,EAAUC,YAAV,CAJqC;MAKlDS,QAAQ,EAAEN,CAAC,CAACM,QALsC;MAMlDC,EAAE,EAAEP,CAAC,CAACO,EAN4C;MAOlD;MACAC,QAAQ,EAAET,qBAAqB,GAC3BA,qBAAqB,KAAKC,CAAC,CAACO,EADD,GAE3BT,kBAAkB,KAAKE,CAAC,CAACO,EAAzB,IAA+BN,CAAC,KAAK;IAVS,CAA/C;EAAA,CALsB;AAAA,CAA3B;;AAkBA,OAAO,IAAMQ,+BAA+B,GAAG7B,cAAc,CAC3DC,kBAD2D,EAE3DG,sBAF2D,EAG3DF,YAH2D,EAI3DY,oBAJ2D,EAK3DR,2BAL2D,EAM3DC,2BAN2D,EAO3D,UAACuB,UAAD,EAAaC,cAAb,EAA6Bf,IAA7B,EAAmCC,YAAnC,EAAiDC,kBAAjD,EAAqEC,qBAArE,EAA+F;EAC7F,OAAOY,cAAc,CAClBC,GADI,CACA,UAAAZ,CAAC;IAAA,OAAIU,UAAU,CAACV,CAAD,CAAd;EAAA,CADD,EAEJa,MAFI,CAEG9B,QAFH,EAGJ6B,GAHI,CAGAjB,kBAAkB,CAACC,IAAD,EAAOC,YAAP,EAAqBC,kBAArB,EAAyCC,qBAAzC,CAHlB,CAAP;AAID,CAZ0D,CAAtD;AAeP,OAAO,IAAMe,mBAAmB,GAAGlC,cAAc,CAC/C6B,+BAD+C,EAE/CxB,iBAF+C,EAG/CG,0BAH+C,EAI/CN,YAJ+C,EAK/C,UAACiC,OAAD,EAAUC,KAAV,EAAiBC,WAAjB;EAAA,IAAgCC,aAAhC,QAAgCA,aAAhC;EAAA,OACEA,aAAa,CACX;IAAEX,EAAE,EAAE;EAAN,CADW,EAEX;IACEY,aAAa,EAAEJ,OAAO,CAACK,MADzB;IAEEC,kBAAkB,EAAEH,aAAa,CAAC;MAChCX,EAAE,iCAA0Bd,UAAU,CAACuB,KAAD,CAApC;IAD8B,CAAD,CAAb,CAEjBM,iBAFiB,EAFtB;IAKEC,UAAU,EAAEL,aAAa,CAAC;MACxBX,EAAE,EAAEU,WAAW,KAAK,MAAhB,GAAyB,gBAAzB,GAA4C;IADxB,CAAD;EAL3B,CAFW,CADf;AAAA,CAL+C,CAA1C"},"metadata":{},"sourceType":"module"}