{"ast":null,"code":"import { curry, assoc, reduce, keys } from 'ramda';\n/**\n * Creates a new object with the own properties of the provided object, but the\n * keys renamed according to the keysMap object as `{oldKey: newKey}`.\n * When some key is not found in the keysMap, then it's removed.\n *\n * Keep in mind that in the case of keys conflict is behaviour undefined and\n * the result may vary between various JS engines!\n *\n * @sig {a: b} -> {a: *} -> {b: *}\n */\n\nvar renameKeys = curry(function (keysMap, obj) {\n  return reduce(function (acc, key) {\n    return keysMap[key] ? assoc(keysMap[key], obj[key], acc) : acc;\n  }, {}, keys(obj));\n});\nexport default renameKeys;","map":{"version":3,"names":["curry","assoc","reduce","keys","renameKeys","keysMap","obj","acc","key"],"sources":["/Users/zentoo/Code/v2/src/utils/renameKeys.ts"],"sourcesContent":["import { curry, assoc, reduce, keys } from 'ramda';\n\n/**\n * Creates a new object with the own properties of the provided object, but the\n * keys renamed according to the keysMap object as `{oldKey: newKey}`.\n * When some key is not found in the keysMap, then it's removed.\n *\n * Keep in mind that in the case of keys conflict is behaviour undefined and\n * the result may vary between various JS engines!\n *\n * @sig {a: b} -> {a: *} -> {b: *}\n */\nconst renameKeys = curry((keysMap, obj) =>\n  reduce((acc, key) => (keysMap[key] ? assoc(keysMap[key], obj[key], acc) : acc), {}, keys(obj))\n);\n\nexport default renameKeys;\n"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,IAA/B,QAA2C,OAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAGJ,KAAK,CAAC,UAACK,OAAD,EAAUC,GAAV;EAAA,OACvBJ,MAAM,CAAC,UAACK,GAAD,EAAMC,GAAN;IAAA,OAAeH,OAAO,CAACG,GAAD,CAAP,GAAeP,KAAK,CAACI,OAAO,CAACG,GAAD,CAAR,EAAeF,GAAG,CAACE,GAAD,CAAlB,EAAyBD,GAAzB,CAApB,GAAoDA,GAAnE;EAAA,CAAD,EAA0E,EAA1E,EAA8EJ,IAAI,CAACG,GAAD,CAAlF,CADiB;AAAA,CAAD,CAAxB;AAIA,eAAeF,UAAf"},"metadata":{},"sourceType":"module"}