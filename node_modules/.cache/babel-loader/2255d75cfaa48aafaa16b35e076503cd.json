{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { geocodeMetaSelector, propertiesMetaSelector, propertySearchesSelector, configSelector } from './state';\nimport { propertiesSearchRequestQuerySelector } from './search-api-request';\nimport { murmur2 } from 'murmurhash-js';\nimport { plpLocationNameSelector } from './location';\nimport { otherConfigsSelector } from './config/config';\nimport { plpUrlPathParamsSelector, plpMatchSelector } from './match';\nexport var plpQueryHashSelector = createSelector(propertiesSearchRequestQuerySelector, function (query) {\n  return murmur2(JSON.stringify(query)).toString();\n});\nexport var plpPropertyRequestStatus = createSelector(plpQueryHashSelector, propertiesMetaSelector, function (hash, propertiesMeta) {\n  var propertyMeta = propertiesMeta[hash];\n\n  if (propertyMeta === undefined) {\n    return 'NONE';\n  }\n\n  return propertyMeta.status;\n});\nexport var propertySearchSelector = createSelector(propertySearchesSelector, plpQueryHashSelector, function (propertySearches, hash) {\n  var result = propertySearches[hash];\n\n  if (result) {\n    return result;\n  }\n\n  return [];\n});\nvar plpLocationGeocodeStatus = createSelector(plpLocationNameSelector, geocodeMetaSelector, function (location, meta) {\n  var entityMeta = meta[location];\n  return entityMeta ? entityMeta.status : 'NONE';\n});\nexport var isPlpLocationGeocoded = createSelector(plpLocationGeocodeStatus, function (status) {\n  return status === 'SUCCESS';\n});\nexport var isUsageTypeConfigLoaded = createSelector(configSelector, plpUrlPathParamsSelector, function (config, path) {\n  if (!config.currentConfig) {\n    return true;\n  }\n\n  return path.usageType === config.currentConfig;\n});\nexport var usageTypeSelector = createSelector(plpUrlPathParamsSelector, function (params) {\n  return params.usageType;\n});\nexport var configEndpointForCurrentUsageTypeSelector = createSelector(usageTypeSelector, otherConfigsSelector, function (usageType, configs) {\n  var config = configs.find(function (c) {\n    return c.name === usageType;\n  });\n\n  if (!config) {\n    throw new Error('Config is missing data for config endpoint mapping');\n  }\n\n  return config.endpoint;\n});\nexport var isPlpPath = createSelector(plpMatchSelector, function (match) {\n  return !!match;\n});","map":{"version":3,"names":["createSelector","geocodeMetaSelector","propertiesMetaSelector","propertySearchesSelector","configSelector","propertiesSearchRequestQuerySelector","murmur2","plpLocationNameSelector","otherConfigsSelector","plpUrlPathParamsSelector","plpMatchSelector","plpQueryHashSelector","query","JSON","stringify","toString","plpPropertyRequestStatus","hash","propertiesMeta","propertyMeta","undefined","status","propertySearchSelector","propertySearches","result","plpLocationGeocodeStatus","location","meta","entityMeta","isPlpLocationGeocoded","isUsageTypeConfigLoaded","config","path","currentConfig","usageType","usageTypeSelector","params","configEndpointForCurrentUsageTypeSelector","configs","find","c","name","Error","endpoint","isPlpPath","match"],"sources":["/Users/zentoo/Code/v2/src/redux/selectors/plp.ts"],"sourcesContent":["import { createSelector } from 'reselect';\nimport {\n  geocodeMetaSelector,\n  propertiesMetaSelector,\n  propertySearchesSelector,\n  configSelector,\n} from './state';\nimport { propertiesSearchRequestQuerySelector } from './search-api-request';\nimport { murmur2 } from 'murmurhash-js';\nimport { plpLocationNameSelector } from './location';\nimport { otherConfigsSelector } from './config/config';\nimport { plpUrlPathParamsSelector, plpMatchSelector } from './match';\n\nexport const plpQueryHashSelector = createSelector(\n  propertiesSearchRequestQuerySelector,\n  query => murmur2(JSON.stringify(query)).toString()\n);\n\nexport const plpPropertyRequestStatus = createSelector(\n  plpQueryHashSelector,\n  propertiesMetaSelector,\n  (hash, propertiesMeta) => {\n    const propertyMeta = propertiesMeta[hash];\n    if (propertyMeta === undefined) {\n      return 'NONE';\n    }\n\n    return propertyMeta.status;\n  }\n);\n\nexport const propertySearchSelector = createSelector(\n  propertySearchesSelector,\n  plpQueryHashSelector,\n  (propertySearches, hash) => {\n    const result = propertySearches[hash];\n\n    if (result) {\n      return result;\n    }\n\n    return [];\n  }\n);\n\nconst plpLocationGeocodeStatus = createSelector(\n  plpLocationNameSelector,\n  geocodeMetaSelector,\n  (location, meta) => {\n    const entityMeta = meta[location];\n    return entityMeta ? entityMeta.status : 'NONE';\n  }\n);\n\nexport const isPlpLocationGeocoded = createSelector(\n  plpLocationGeocodeStatus,\n  status => status === 'SUCCESS'\n);\n\nexport const isUsageTypeConfigLoaded = createSelector(\n  configSelector,\n  plpUrlPathParamsSelector,\n  (config, path) => {\n    if (!config.currentConfig) {\n      return true;\n    }\n\n    return path.usageType === config.currentConfig;\n  }\n);\n\nexport const usageTypeSelector = createSelector(\n  plpUrlPathParamsSelector,\n  params => params.usageType\n);\n\nexport const configEndpointForCurrentUsageTypeSelector = createSelector(\n  usageTypeSelector,\n  otherConfigsSelector,\n  (usageType, configs) => {\n    const config = configs.find(c => c.name === usageType);\n    if (!config) {\n      throw new Error('Config is missing data for config endpoint mapping');\n    }\n\n    return config.endpoint;\n  }\n);\n\nexport const isPlpPath = createSelector(\n  plpMatchSelector,\n  match => !!match\n);\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SACEC,mBADF,EAEEC,sBAFF,EAGEC,wBAHF,EAIEC,cAJF,QAKO,SALP;AAMA,SAASC,oCAAT,QAAqD,sBAArD;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,uBAAT,QAAwC,YAAxC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,wBAAT,EAAmCC,gBAAnC,QAA2D,SAA3D;AAEA,OAAO,IAAMC,oBAAoB,GAAGX,cAAc,CAChDK,oCADgD,EAEhD,UAAAO,KAAK;EAAA,OAAIN,OAAO,CAACO,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAD,CAAP,CAA+BG,QAA/B,EAAJ;AAAA,CAF2C,CAA3C;AAKP,OAAO,IAAMC,wBAAwB,GAAGhB,cAAc,CACpDW,oBADoD,EAEpDT,sBAFoD,EAGpD,UAACe,IAAD,EAAOC,cAAP,EAA0B;EACxB,IAAMC,YAAY,GAAGD,cAAc,CAACD,IAAD,CAAnC;;EACA,IAAIE,YAAY,KAAKC,SAArB,EAAgC;IAC9B,OAAO,MAAP;EACD;;EAED,OAAOD,YAAY,CAACE,MAApB;AACD,CAVmD,CAA/C;AAaP,OAAO,IAAMC,sBAAsB,GAAGtB,cAAc,CAClDG,wBADkD,EAElDQ,oBAFkD,EAGlD,UAACY,gBAAD,EAAmBN,IAAnB,EAA4B;EAC1B,IAAMO,MAAM,GAAGD,gBAAgB,CAACN,IAAD,CAA/B;;EAEA,IAAIO,MAAJ,EAAY;IACV,OAAOA,MAAP;EACD;;EAED,OAAO,EAAP;AACD,CAXiD,CAA7C;AAcP,IAAMC,wBAAwB,GAAGzB,cAAc,CAC7CO,uBAD6C,EAE7CN,mBAF6C,EAG7C,UAACyB,QAAD,EAAWC,IAAX,EAAoB;EAClB,IAAMC,UAAU,GAAGD,IAAI,CAACD,QAAD,CAAvB;EACA,OAAOE,UAAU,GAAGA,UAAU,CAACP,MAAd,GAAuB,MAAxC;AACD,CAN4C,CAA/C;AASA,OAAO,IAAMQ,qBAAqB,GAAG7B,cAAc,CACjDyB,wBADiD,EAEjD,UAAAJ,MAAM;EAAA,OAAIA,MAAM,KAAK,SAAf;AAAA,CAF2C,CAA5C;AAKP,OAAO,IAAMS,uBAAuB,GAAG9B,cAAc,CACnDI,cADmD,EAEnDK,wBAFmD,EAGnD,UAACsB,MAAD,EAASC,IAAT,EAAkB;EAChB,IAAI,CAACD,MAAM,CAACE,aAAZ,EAA2B;IACzB,OAAO,IAAP;EACD;;EAED,OAAOD,IAAI,CAACE,SAAL,KAAmBH,MAAM,CAACE,aAAjC;AACD,CATkD,CAA9C;AAYP,OAAO,IAAME,iBAAiB,GAAGnC,cAAc,CAC7CS,wBAD6C,EAE7C,UAAA2B,MAAM;EAAA,OAAIA,MAAM,CAACF,SAAX;AAAA,CAFuC,CAAxC;AAKP,OAAO,IAAMG,yCAAyC,GAAGrC,cAAc,CACrEmC,iBADqE,EAErE3B,oBAFqE,EAGrE,UAAC0B,SAAD,EAAYI,OAAZ,EAAwB;EACtB,IAAMP,MAAM,GAAGO,OAAO,CAACC,IAAR,CAAa,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACC,IAAF,KAAWP,SAAf;EAAA,CAAd,CAAf;;EACA,IAAI,CAACH,MAAL,EAAa;IACX,MAAM,IAAIW,KAAJ,CAAU,oDAAV,CAAN;EACD;;EAED,OAAOX,MAAM,CAACY,QAAd;AACD,CAVoE,CAAhE;AAaP,OAAO,IAAMC,SAAS,GAAG5C,cAAc,CACrCU,gBADqC,EAErC,UAAAmC,KAAK;EAAA,OAAI,CAAC,CAACA,KAAN;AAAA,CAFgC,CAAhC"},"metadata":{},"sourceType":"module"}