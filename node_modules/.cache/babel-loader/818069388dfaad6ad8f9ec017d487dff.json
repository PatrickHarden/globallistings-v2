{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { paramsSelector, propertyIdPathSelectorSelector, searchBiasSelector, searchRadiusRestrictionSelector, searchCountryRestrictionSelector, searchTypesRestrictionSelector, assumeZipCodeSelector } from './config';\nexport var propertySearchConfig = createSelector(paramsSelector, propertyIdPathSelectorSelector, function (params, searchPaths) {\n  return {\n    Site: params.Site,\n    PropertyOrigins: params.PropertyOrigins[0] || '',\n    SearchPaths: searchPaths\n  };\n});\nexport var placeAutoCompleteConfig = createSelector(searchBiasSelector, searchRadiusRestrictionSelector, searchCountryRestrictionSelector, searchTypesRestrictionSelector, assumeZipCodeSelector, function (bias, radius, country, types, allowAssumeZipCode) {\n  // JS XOR logic\n  if (bias ? !radius : radius) {\n    throw new Error('Both bias and radius must be present in the config or none at all');\n  } // TS doesn't correctly understand XOR so we have to check for both bias and radius\n\n\n  if (!bias || !radius) {\n    if (allowAssumeZipCode) {\n      return {\n        country: country,\n        types: types,\n        allowAssumeZipCode: allowAssumeZipCode\n      };\n    } else {\n      return {\n        country: country,\n        types: types\n      };\n    }\n  }\n\n  return {\n    bias: {\n      lat: Number.parseFloat(bias.lat),\n      lng: Number.parseFloat(bias.lon),\n      radius: radius\n    },\n    country: country,\n    types: types,\n    allowAssumeZipCode: allowAssumeZipCode\n  };\n});","map":{"version":3,"names":["createSelector","paramsSelector","propertyIdPathSelectorSelector","searchBiasSelector","searchRadiusRestrictionSelector","searchCountryRestrictionSelector","searchTypesRestrictionSelector","assumeZipCodeSelector","propertySearchConfig","params","searchPaths","Site","PropertyOrigins","SearchPaths","placeAutoCompleteConfig","bias","radius","country","types","allowAssumeZipCode","Error","lat","Number","parseFloat","lng","lon"],"sources":["/Users/zentoo/Code/v2/src/redux/selectors/config/autocomplete-config.ts"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { Dictionary } from '../../../types/common/dictionary';\nimport { PropertyIdSearchPath } from '../../../types/config';\n\nimport {\n  paramsSelector,\n  searchPathSelectorSelector,\n  propertyIdPathSelectorSelector,\n  searchBiasSelector,\n  searchRadiusRestrictionSelector,\n  searchCountryRestrictionSelector,\n  searchTypesRestrictionSelector,\n  assumeZipCodeSelector,\n} from './config';\nimport { messagesSelector } from '../state';\n\nexport interface PropertySearchConfig {\n  readonly Site: string;\n  readonly PropertyOrigins?: string;\n  readonly SearchPaths?: PropertyIdSearchPath[];\n  readonly Messages?: Dictionary<string>;\n}\n\nexport const propertySearchConfig = createSelector(\n  paramsSelector,\n  propertyIdPathSelectorSelector,\n  (params, searchPaths): PropertySearchConfig => {\n    return {\n      Site: params.Site,\n      PropertyOrigins: params.PropertyOrigins![0] || '',\n      SearchPaths: searchPaths,\n    };\n  }\n);\n\nexport interface AutocompleteConfig {\n  readonly bias?: {\n    readonly lat: number;\n    readonly lng: number;\n    readonly radius: number;\n  };\n  readonly country?: string;\n  readonly types?: Array<string>;\n  readonly allowAssumeZipCode?: boolean;\n}\n\nexport const placeAutoCompleteConfig = createSelector(\n  searchBiasSelector,\n  searchRadiusRestrictionSelector,\n  searchCountryRestrictionSelector,\n  searchTypesRestrictionSelector,\n  assumeZipCodeSelector,\n  (bias, radius, country, types, allowAssumeZipCode): AutocompleteConfig => {\n    // JS XOR logic\n    if (bias ? !radius : radius) {\n      throw new Error('Both bias and radius must be present in the config or none at all');\n    }\n\n    // TS doesn't correctly understand XOR so we have to check for both bias and radius\n    if (!bias || !radius) {\n      if (allowAssumeZipCode) {\n        return { country, types, allowAssumeZipCode };\n      } else {\n        return { country, types };\n      }\n    }\n\n    return {\n      bias: {\n        lat: Number.parseFloat(bias.lat),\n        lng: Number.parseFloat(bias.lon),\n        radius,\n      },\n      country,\n      types,\n      allowAssumeZipCode,\n    };\n  }\n);\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAIA,SACEC,cADF,EAGEC,8BAHF,EAIEC,kBAJF,EAKEC,+BALF,EAMEC,gCANF,EAOEC,8BAPF,EAQEC,qBARF,QASO,UATP;AAmBA,OAAO,IAAMC,oBAAoB,GAAGR,cAAc,CAChDC,cADgD,EAEhDC,8BAFgD,EAGhD,UAACO,MAAD,EAASC,WAAT,EAA+C;EAC7C,OAAO;IACLC,IAAI,EAAEF,MAAM,CAACE,IADR;IAELC,eAAe,EAAEH,MAAM,CAACG,eAAP,CAAwB,CAAxB,KAA8B,EAF1C;IAGLC,WAAW,EAAEH;EAHR,CAAP;AAKD,CAT+C,CAA3C;AAuBP,OAAO,IAAMI,uBAAuB,GAAGd,cAAc,CACnDG,kBADmD,EAEnDC,+BAFmD,EAGnDC,gCAHmD,EAInDC,8BAJmD,EAKnDC,qBALmD,EAMnD,UAACQ,IAAD,EAAOC,MAAP,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,kBAA/B,EAA0E;EACxE;EACA,IAAIJ,IAAI,GAAG,CAACC,MAAJ,GAAaA,MAArB,EAA6B;IAC3B,MAAM,IAAII,KAAJ,CAAU,mEAAV,CAAN;EACD,CAJuE,CAMxE;;;EACA,IAAI,CAACL,IAAD,IAAS,CAACC,MAAd,EAAsB;IACpB,IAAIG,kBAAJ,EAAwB;MACtB,OAAO;QAAEF,OAAO,EAAPA,OAAF;QAAWC,KAAK,EAALA,KAAX;QAAkBC,kBAAkB,EAAlBA;MAAlB,CAAP;IACD,CAFD,MAEO;MACL,OAAO;QAAEF,OAAO,EAAPA,OAAF;QAAWC,KAAK,EAALA;MAAX,CAAP;IACD;EACF;;EAED,OAAO;IACLH,IAAI,EAAE;MACJM,GAAG,EAAEC,MAAM,CAACC,UAAP,CAAkBR,IAAI,CAACM,GAAvB,CADD;MAEJG,GAAG,EAAEF,MAAM,CAACC,UAAP,CAAkBR,IAAI,CAACU,GAAvB,CAFD;MAGJT,MAAM,EAANA;IAHI,CADD;IAMLC,OAAO,EAAPA,OANK;IAOLC,KAAK,EAALA,KAPK;IAQLC,kBAAkB,EAAlBA;EARK,CAAP;AAUD,CA/BkD,CAA9C"},"metadata":{},"sourceType":"module"}