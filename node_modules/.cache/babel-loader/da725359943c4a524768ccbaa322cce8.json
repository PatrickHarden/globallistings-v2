{"ast":null,"code":"import axios from 'axios';\nimport { propertySearchConfig } from '../selectors/config/autocomplete-config';\nimport { configSelector } from '../../redux/selectors/state';\nimport { paramsSelector } from '../../redux/selectors/config/config';\nimport { suggestionsSuccess, suggestionsFailure, suggestionsRequest } from './autocomplete-request';\nimport { normaliseAutocompleteResponse, normaliseSearchResponse } from '../../api/normalisers';\nexport var lookupByPropertyId = function lookupByPropertyId(name) {\n  return function (dispatch, getState) {\n    dispatch(suggestionsRequest(name));\n    var emptyResponse = [{\n      description: '',\n      placeId: ''\n    }];\n    var state = getState();\n    var psConfig = propertySearchConfig(state);\n    var config = configSelector(state);\n    var configParams = paramsSelector(state);\n    var site = psConfig.Site;\n    var suffixes = configParams.PropertyDefaultEnumerationSuffixes || [''];\n    var searchPaths = psConfig.SearchPaths;\n    var propertyOrigin = psConfig.PropertyOrigins !== undefined ? psConfig.PropertyOrigins : '';\n    var propertyIdQuery = name.toLowerCase().includes(propertyOrigin.toLowerCase()) ? suffixes.map(function (suffix) {\n      return \"\".concat(name).concat(suffix);\n    }).join() : suffixes.map(function (suffix) {\n      return \"\".concat(propertyOrigin).concat(name).concat(suffix);\n    }).join();\n    var params = {\n      Site: site,\n      'Common.PrimaryKey': propertyIdQuery\n    };\n    var url = config.api;\n    return axios.get(\"\".concat(url, \"/propertylistings/query\"), {\n      params: params\n    }).then(function (resp) {\n      if (resp.data.DocumentCount > 0) {\n        // TODO create a better model so an array indexer isn't required\n        var suggestions = normaliseSearchResponse(psConfig)(resp.data.Documents[0]);\n        var normalisedAutocompleteResponse = normaliseAutocompleteResponse(suggestions);\n        dispatch(suggestionsSuccess(normalisedAutocompleteResponse, name));\n      }\n    }).catch(function (ex) {\n      var normalisedData = normaliseAutocompleteResponse(emptyResponse);\n      dispatch(suggestionsFailure(ex, name));\n    });\n  };\n};","map":{"version":3,"names":["axios","propertySearchConfig","configSelector","paramsSelector","suggestionsSuccess","suggestionsFailure","suggestionsRequest","normaliseAutocompleteResponse","normaliseSearchResponse","lookupByPropertyId","name","dispatch","getState","emptyResponse","description","placeId","state","psConfig","config","configParams","site","Site","suffixes","PropertyDefaultEnumerationSuffixes","searchPaths","SearchPaths","propertyOrigin","PropertyOrigins","undefined","propertyIdQuery","toLowerCase","includes","map","suffix","join","params","url","api","get","then","resp","data","DocumentCount","suggestions","Documents","normalisedAutocompleteResponse","catch","ex","normalisedData"],"sources":["/Users/zentoo/Code/v2/src/redux/actions/property-request.ts"],"sourcesContent":["import axios from 'axios';\nimport { stringify } from 'query-string';\nimport { State } from '../../types/state';\nimport { propertySearchConfig } from '../selectors/config/autocomplete-config';\nimport { configSelector } from '../../redux/selectors/state';\nimport { paramsSelector } from '../../redux/selectors/config/config';\nimport { suggestionsSuccess, suggestionsFailure, suggestionsRequest } from './autocomplete-request';\nimport { normaliseAutocompleteResponse, normaliseSearchResponse } from '../../api/normalisers';\nimport { Autocomplete, NormalisedAutocompleteResult } from '../../types/autocomplete';\n\nexport const lookupByPropertyId = (name: string) => (dispatch: Function, getState: () => State) => {\n  dispatch(suggestionsRequest(name));\n  const emptyResponse = [\n    {\n      description: '',\n      placeId: '',\n    },\n  ];\n\n  const state = getState();\n  const psConfig = propertySearchConfig(state);\n  const config = configSelector(state);\n  const configParams = paramsSelector(state);\n  const site = psConfig.Site;\n  const suffixes = configParams.PropertyDefaultEnumerationSuffixes || [''];\n\n  const searchPaths = psConfig.SearchPaths;\n  const propertyOrigin = psConfig.PropertyOrigins !== undefined ? psConfig.PropertyOrigins : '';\n\n  const propertyIdQuery = name.toLowerCase().includes(propertyOrigin.toLowerCase())\n    ? suffixes.map(suffix => `${name}${suffix}`).join()\n    : suffixes.map(suffix => `${propertyOrigin}${name}${suffix}`).join();\n\n  const params = { Site: site, 'Common.PrimaryKey': propertyIdQuery };\n  const url = config.api;\n\n  return axios\n    .get(`${url}/propertylistings/query`, {\n      params,\n    })\n    .then(resp => {\n      if (resp.data.DocumentCount > 0) {\n        // TODO create a better model so an array indexer isn't required\n        const suggestions = normaliseSearchResponse(psConfig!)(resp.data.Documents[0]);\n        const normalisedAutocompleteResponse = normaliseAutocompleteResponse(suggestions);\n\n        dispatch(suggestionsSuccess(normalisedAutocompleteResponse, name));\n      }\n    })\n    .catch(ex => {\n      const normalisedData = normaliseAutocompleteResponse(emptyResponse);\n      dispatch(suggestionsFailure(ex, name));\n    });\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,oBAAT,QAAqC,yCAArC;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,cAAT,QAA+B,qCAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,QAA2E,wBAA3E;AACA,SAASC,6BAAT,EAAwCC,uBAAxC,QAAuE,uBAAvE;AAGA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD;EAAA,OAAkB,UAACC,QAAD,EAAqBC,QAArB,EAA+C;IACjGD,QAAQ,CAACL,kBAAkB,CAACI,IAAD,CAAnB,CAAR;IACA,IAAMG,aAAa,GAAG,CACpB;MACEC,WAAW,EAAE,EADf;MAEEC,OAAO,EAAE;IAFX,CADoB,CAAtB;IAOA,IAAMC,KAAK,GAAGJ,QAAQ,EAAtB;IACA,IAAMK,QAAQ,GAAGhB,oBAAoB,CAACe,KAAD,CAArC;IACA,IAAME,MAAM,GAAGhB,cAAc,CAACc,KAAD,CAA7B;IACA,IAAMG,YAAY,GAAGhB,cAAc,CAACa,KAAD,CAAnC;IACA,IAAMI,IAAI,GAAGH,QAAQ,CAACI,IAAtB;IACA,IAAMC,QAAQ,GAAGH,YAAY,CAACI,kCAAb,IAAmD,CAAC,EAAD,CAApE;IAEA,IAAMC,WAAW,GAAGP,QAAQ,CAACQ,WAA7B;IACA,IAAMC,cAAc,GAAGT,QAAQ,CAACU,eAAT,KAA6BC,SAA7B,GAAyCX,QAAQ,CAACU,eAAlD,GAAoE,EAA3F;IAEA,IAAME,eAAe,GAAGnB,IAAI,CAACoB,WAAL,GAAmBC,QAAnB,CAA4BL,cAAc,CAACI,WAAf,EAA5B,IACpBR,QAAQ,CAACU,GAAT,CAAa,UAAAC,MAAM;MAAA,iBAAOvB,IAAP,SAAcuB,MAAd;IAAA,CAAnB,EAA2CC,IAA3C,EADoB,GAEpBZ,QAAQ,CAACU,GAAT,CAAa,UAAAC,MAAM;MAAA,iBAAOP,cAAP,SAAwBhB,IAAxB,SAA+BuB,MAA/B;IAAA,CAAnB,EAA4DC,IAA5D,EAFJ;IAIA,IAAMC,MAAM,GAAG;MAAEd,IAAI,EAAED,IAAR;MAAc,qBAAqBS;IAAnC,CAAf;IACA,IAAMO,GAAG,GAAGlB,MAAM,CAACmB,GAAnB;IAEA,OAAOrC,KAAK,CACTsC,GADI,WACGF,GADH,8BACiC;MACpCD,MAAM,EAANA;IADoC,CADjC,EAIJI,IAJI,CAIC,UAAAC,IAAI,EAAI;MACZ,IAAIA,IAAI,CAACC,IAAL,CAAUC,aAAV,GAA0B,CAA9B,EAAiC;QAC/B;QACA,IAAMC,WAAW,GAAGnC,uBAAuB,CAACS,QAAD,CAAvB,CAAmCuB,IAAI,CAACC,IAAL,CAAUG,SAAV,CAAoB,CAApB,CAAnC,CAApB;QACA,IAAMC,8BAA8B,GAAGtC,6BAA6B,CAACoC,WAAD,CAApE;QAEAhC,QAAQ,CAACP,kBAAkB,CAACyC,8BAAD,EAAiCnC,IAAjC,CAAnB,CAAR;MACD;IACF,CAZI,EAaJoC,KAbI,CAaE,UAAAC,EAAE,EAAI;MACX,IAAMC,cAAc,GAAGzC,6BAA6B,CAACM,aAAD,CAApD;MACAF,QAAQ,CAACN,kBAAkB,CAAC0C,EAAD,EAAKrC,IAAL,CAAnB,CAAR;IACD,CAhBI,CAAP;EAiBD,CA3CiC;AAAA,CAA3B"},"metadata":{},"sourceType":"module"}