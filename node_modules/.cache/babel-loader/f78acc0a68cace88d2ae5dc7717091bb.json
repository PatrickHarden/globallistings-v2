{"ast":null,"code":"import { pickBy, not, compose } from 'ramda';\n/**\n * Splits an object into two based on a predicate\n * @param predicate A predicate used to split object into two\n */\n\nexport var splitObjectBy = function splitObjectBy(predicate) {\n  return function (obj) {\n    return [pickBy(predicate)(obj), pickBy(compose(not, predicate))(obj)];\n  };\n};","map":{"version":3,"names":["pickBy","not","compose","splitObjectBy","predicate","obj"],"sources":["/Users/zentoo/Code/v2/src/utils/split-object-by.ts"],"sourcesContent":["import { pickBy, not, compose, ObjPred } from 'ramda';\n\n/**\n * Splits an object into two based on a predicate\n * @param predicate A predicate used to split object into two\n */\nexport const splitObjectBy = (predicate: ObjPred) => (obj: object) => [\n  pickBy(predicate)(obj),\n  pickBy(\n    compose(\n      not,\n      predicate\n    )\n  )(obj),\n];\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,OAAtB,QAA8C,OAA9C;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD;EAAA,OAAwB,UAACC,GAAD;IAAA,OAAiB,CACpEL,MAAM,CAACI,SAAD,CAAN,CAAkBC,GAAlB,CADoE,EAEpEL,MAAM,CACJE,OAAO,CACLD,GADK,EAELG,SAFK,CADH,CAAN,CAKEC,GALF,CAFoE,CAAjB;EAAA,CAAxB;AAAA,CAAtB"},"metadata":{},"sourceType":"module"}