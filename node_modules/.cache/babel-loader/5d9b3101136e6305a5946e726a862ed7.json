{"ast":null,"code":"import { placesAutocomplete } from '../../api/google-maps/places';\nimport { placeAutoCompleteConfig } from '../selectors/config/autocomplete-config';\nimport { createRequestPending, createRequestFailure, createRequestSuccess } from '../../types/common/action-creators';\nimport { normaliseAutocompleteResponse } from '../../api/normalisers';\nexport var suggestionsRequest = createRequestPending('GET_SUGGESTIONS_REQUEST');\nexport var suggestionsFailure = createRequestFailure('GET_SUGGESTIONS_FAILURE');\nexport var suggestionsSuccess = createRequestSuccess('GET_SUGGESTIONS_SUCCESS');\nexport var lookupPlaceByName = function lookupPlaceByName(name) {\n  return function (dispatch, getState) {\n    dispatch(suggestionsRequest(name));\n    var state = getState();\n    var config = placeAutoCompleteConfig(state);\n    return placesAutocomplete(name, config).then(function (suggestions) {\n      var normalisedData = normaliseAutocompleteResponse(suggestions);\n      dispatch(suggestionsSuccess(normalisedData, name));\n    }).catch(function (ex) {\n      dispatch(suggestionsFailure(ex, name));\n    });\n  };\n};","map":{"version":3,"names":["placesAutocomplete","placeAutoCompleteConfig","createRequestPending","createRequestFailure","createRequestSuccess","normaliseAutocompleteResponse","suggestionsRequest","suggestionsFailure","suggestionsSuccess","lookupPlaceByName","name","dispatch","getState","state","config","then","suggestions","normalisedData","catch","ex"],"sources":["/Users/zentoo/Code/v2/src/redux/actions/autocomplete-request.ts"],"sourcesContent":["import { placesAutocomplete } from '../../api/google-maps/places';\nimport { State } from '../../types/state';\nimport { placeAutoCompleteConfig } from '../selectors/config/autocomplete-config';\nimport {\n  createRequestPending,\n  createRequestFailure,\n  createRequestSuccess,\n} from '../../types/common/action-creators';\nimport { normaliseAutocompleteResponse } from '../../api/normalisers';\nimport { NormalisedAutocompleteResult } from '../../types/autocomplete';\n\nexport const suggestionsRequest = createRequestPending('GET_SUGGESTIONS_REQUEST');\nexport const suggestionsFailure = createRequestFailure('GET_SUGGESTIONS_FAILURE');\nexport const suggestionsSuccess = createRequestSuccess<\n  NormalisedAutocompleteResult,\n  'GET_SUGGESTIONS_SUCCESS'\n>('GET_SUGGESTIONS_SUCCESS');\n\nexport const lookupPlaceByName = (name: string) => (dispatch: Function, getState: () => State) => {\n  dispatch(suggestionsRequest(name));\n  const state = getState();\n  const config = placeAutoCompleteConfig(state);\n\n  return placesAutocomplete(name, config)\n    .then(suggestions => {\n      const normalisedData = normaliseAutocompleteResponse(suggestions);\n      dispatch(suggestionsSuccess(normalisedData, name));\n    })\n    .catch(ex => {\n      dispatch(suggestionsFailure(ex, name));\n    });\n};\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,uBAAT,QAAwC,yCAAxC;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,oCAJP;AAKA,SAASC,6BAAT,QAA8C,uBAA9C;AAGA,OAAO,IAAMC,kBAAkB,GAAGJ,oBAAoB,CAAC,yBAAD,CAA/C;AACP,OAAO,IAAMK,kBAAkB,GAAGJ,oBAAoB,CAAC,yBAAD,CAA/C;AACP,OAAO,IAAMK,kBAAkB,GAAGJ,oBAAoB,CAGpD,yBAHoD,CAA/C;AAKP,OAAO,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD;EAAA,OAAkB,UAACC,QAAD,EAAqBC,QAArB,EAA+C;IAChGD,QAAQ,CAACL,kBAAkB,CAACI,IAAD,CAAnB,CAAR;IACA,IAAMG,KAAK,GAAGD,QAAQ,EAAtB;IACA,IAAME,MAAM,GAAGb,uBAAuB,CAACY,KAAD,CAAtC;IAEA,OAAOb,kBAAkB,CAACU,IAAD,EAAOI,MAAP,CAAlB,CACJC,IADI,CACC,UAAAC,WAAW,EAAI;MACnB,IAAMC,cAAc,GAAGZ,6BAA6B,CAACW,WAAD,CAApD;MACAL,QAAQ,CAACH,kBAAkB,CAACS,cAAD,EAAiBP,IAAjB,CAAnB,CAAR;IACD,CAJI,EAKJQ,KALI,CAKE,UAAAC,EAAE,EAAI;MACXR,QAAQ,CAACJ,kBAAkB,CAACY,EAAD,EAAKT,IAAL,CAAnB,CAAR;IACD,CAPI,CAAP;EAQD,CAbgC;AAAA,CAA1B"},"metadata":{},"sourceType":"module"}