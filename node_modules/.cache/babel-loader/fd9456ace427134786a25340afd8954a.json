{"ast":null,"code":"/**\n * These types should only be used by selectors and not by components directly\n * selectors need to output their own types\n */\nexport var FilterPlacement;\n\n(function (FilterPlacement) {\n  FilterPlacement[\"group\"] = \"lm_groupFilters\";\n  FilterPlacement[\"location\"] = \"lm_locationFilter\";\n  FilterPlacement[\"primary\"] = \"lm_primaryFilter\";\n  FilterPlacement[\"searchPrimary\"] = \"primary\";\n  FilterPlacement[\"searchSecondary\"] = \"secondary\";\n  FilterPlacement[\"secondary\"] = \"lm_secondaryFilter\";\n  FilterPlacement[\"sort\"] = \"lm_sortFilter\";\n  FilterPlacement[\"tertiary\"] = \"lm_tertiaryFilters\";\n})(FilterPlacement || (FilterPlacement = {}));\n\nexport var FilterType;\n\n(function (FilterType) {\n  FilterType[\"select\"] = \"select\";\n  FilterType[\"range\"] = \"range\";\n})(FilterType || (FilterType = {}));\n\nexport var FilterModifier;\n\n(function (FilterModifier) {\n  FilterModifier[\"query\"] = \"query\";\n  FilterModifier[\"url\"] = \"url\";\n})(FilterModifier || (FilterModifier = {}));\n\nexport var TransactionTypeValue;\n\n(function (TransactionTypeValue) {\n  TransactionTypeValue[\"isSale\"] = \"isSale\";\n  TransactionTypeValue[\"isLetting\"] = \"isLetting\";\n})(TransactionTypeValue || (TransactionTypeValue = {}));\n\nexport var DistanceUnit;\n\n(function (DistanceUnit) {\n  DistanceUnit[\"miles\"] = \"miles\";\n  DistanceUnit[\"km\"] = \"km\";\n})(DistanceUnit || (DistanceUnit = {}));","map":{"version":3,"names":["FilterPlacement","FilterType","FilterModifier","TransactionTypeValue","DistanceUnit"],"sources":["/Users/zentoo/Code/v2/src/types/config.ts"],"sourcesContent":["import { Dictionary } from './common/dictionary';\n\ninterface BaseConfig {\n  readonly api: string;\n  readonly bitlyToken: string;\n  readonly breakpoints: Breakpoints;\n  readonly cdnUrl: string;\n  readonly filters: Filter[];\n  readonly language: string;\n  readonly largePlaceholderImageUrl: string;\n  readonly mapMarkerIconUrl: string;\n  readonly mapMarkerIconUrlInactive: string;\n  readonly mediumPlaceholderImageUrl: string;\n  readonly params: Params;\n  readonly pdf: Pdf;\n  readonly pdpContentDrivenBlock?: any;\n  readonly pdpContentDrivenBlockLettings?: any;\n  readonly placesAddressLookupStringFormat: string;\n  readonly propertyContactApiUrl: string;\n  readonly recaptchaKey: string;\n  readonly searchConfig: SearchConfig;\n  readonly searchLocationName?: string;\n  readonly searchMode: string;\n  readonly siteId: string;\n  readonly siteType: string;\n  readonly smallPlaceholderImageUrl: string;\n  readonly tenantFeesLinkUrl?: string;\n  readonly title: string;\n  readonly urlPropertyAddressFormat: string;\n  readonly currentConfig?: string;\n  readonly limitListMapResults?: string;\n  readonly otherConfigs?: OtherConfig[];\n}\n\n/**\n * These types should only be used by selectors and not by components directly\n * selectors need to output their own types\n */\n\nexport interface Config extends BaseConfig {\n  readonly i18n: object;\n}\n\nexport interface AppConfig extends BaseConfig {\n  readonly i18n: Dictionary<string>;\n}\n\nexport interface FilterOption {\n  readonly value: string;\n  readonly label: string;\n  readonly default: boolean;\n  readonly type?: string;\n}\n\nexport enum FilterPlacement {\n  group = 'lm_groupFilters',\n  location = 'lm_locationFilter',\n  primary = 'lm_primaryFilter',\n  searchPrimary = 'primary',\n  searchSecondary = 'secondary',\n  secondary = 'lm_secondaryFilter',\n  sort = 'lm_sortFilter',\n  tertiary = 'lm_tertiaryFilters',\n}\n\nexport enum FilterType {\n  select = 'select',\n  range = 'range',\n}\n\nexport enum FilterModifier {\n  query = 'query',\n  url = 'url',\n}\n\nexport type FilterCondition = { [K in keyof Params]?: string };\n\nexport interface BaseFilter {\n  readonly placement: FilterPlacement;\n  readonly modifier: FilterModifier;\n  readonly name: string;\n  readonly label: string;\n  readonly conditional?: FilterCondition;\n}\n\nexport interface SelectFilter extends BaseFilter {\n  readonly options: FilterOption[];\n  readonly type: FilterType.select;\n}\n\nexport interface RangeFilter extends BaseFilter {\n  readonly includePOA?: boolean;\n  readonly maxValues: FilterOption[];\n  readonly minValues: FilterOption[];\n  readonly type: FilterType.range;\n}\n\nexport type Filter = SelectFilter | RangeFilter;\n\ninterface Breakpoints {\n  readonly xsmall: string;\n  readonly small: string;\n  readonly medium: string;\n  readonly large: string;\n}\n\ninterface Pdf {\n  readonly staticMapApi: string;\n  readonly pdfDownloadApi: string;\n  readonly renderMiddleware: string;\n}\n\nexport interface Params {\n  readonly 'Common.Aspects': string;\n  readonly 'Common.UsageType': string;\n  readonly CurrencyCode: string;\n  readonly 'Dynamic.TotalArea': string;\n  readonly Interval: string;\n  readonly PageSize: string;\n  readonly RadiusType: string;\n  readonly Site: string;\n  readonly PropertyDefaultEnumerationSuffixes?: string[];\n  readonly PropertyOrigins?: string[];\n  readonly PropertyQualifier?: string;\n  readonly Sort: string;\n  readonly Unit: string;\n}\n\nexport interface Polygon {\n  coords: string,\n  value: string,\n  label: string,\n  default?: boolean,\n  name?: string\n}\n\nexport interface SearchConfig {\n  readonly searchResultsPage: string; // Can't be an empty string\n  readonly searchHeaderLinkUrl?: string; // Can't be an empty string\n  readonly searchBias?: SearchBias; // If it's defined biasRadius is compulsory\n  readonly biasRadius?: number;\n  readonly restrictToCountry?: string;\n  readonly searchPlaceTypes?: string[]; // Can't be an empty array\n  readonly allowAssumeZipCode?: boolean; // if this is present and true, then at 4-5 digits we add (regions) to types to eliminate IP location bias\n  readonly searchPathSortAlphabetical?: boolean; // sort the search path selector alphabetically (i.e, property types)\n  readonly searchHeader: SearchHeader;\n  readonly hideSearchToBuy: boolean;\n  readonly hideSearchToLet: boolean;\n  readonly searchPathSelector?: SearchPath[]; // Can't be an empty array\n  readonly propertyIdSearchPathSelector?: PropertyIdSearchPath[]; // Can't be an empty array\n  readonly searchSuggestDebounce?: number;\n  readonly polygons?: Polygon[];\n}\n\nexport interface SearchPath {\n  readonly value: string;\n  readonly label: string;\n  readonly default: boolean;\n}\n\nexport interface PropertyIdSearchPath {\n  readonly value: string;\n  readonly label: string;\n  readonly display?: string;\n}\n\nexport interface SearchHeader {\n  readonly searchHeaderTitleText?: string;\n  readonly searchHeaderLinkText?: string;\n  readonly searchHeaderLinkUrl?: string;\n}\n\nexport interface SearchBias {\n  readonly lat: string;\n  readonly lon: string;\n}\n\nexport interface LocationTypeDefinition {\n  readonly name: string;\n  readonly definitions: string[];\n  readonly radius: number;\n}\n\nexport interface OtherConfig {\n  readonly name: string;\n  readonly endpoint: string;\n}\n\nexport enum TransactionTypeValue {\n  isSale = 'isSale',\n  isLetting = 'isLetting',\n}\n\nexport enum DistanceUnit {\n  miles = 'miles',\n  km = 'km',\n}\n"],"mappings":"AAkCA;AACA;AACA;AACA;AAiBA,WAAYA,eAAZ;;WAAYA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e;;AAWZ,WAAYC,UAAZ;;WAAYA,U;EAAAA,U;EAAAA,U;GAAAA,U,KAAAA,U;;AAKZ,WAAYC,cAAZ;;WAAYA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c;;AAsHZ,WAAYC,oBAAZ;;WAAYA,oB;EAAAA,oB;EAAAA,oB;GAAAA,oB,KAAAA,oB;;AAKZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y"},"metadata":{},"sourceType":"module"}