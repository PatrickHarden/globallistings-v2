{"ast":null,"code":"import _defineProperty from \"/Users/zentoo/Code/v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport axios from 'axios';\nimport { createStandardAction } from 'typesafe-actions';\nimport { normaliseApiResponse } from '../../api/normalisers';\nimport { createRequestPending, createRequestFailure, createRequestSuccess } from '../../types/common/action-creators';\nimport '../selectors/property-search-results';\nimport { propertiesSearchRequestQuerySelector, propertySearchRequestQuerySelector } from '../selectors/search-api-request';\nimport { plpQueryHashSelector } from '../selectors/plp';\nimport { stringify } from 'query-string';\nimport { propertyIdSelector, propertyDetailsSelector } from '../selectors/pdp';\nimport { docToProperty } from '../../api/normalisers/doc-to-property-mapper';\nexport var searchPropertiesSuccess = createRequestSuccess('SEARCH_PROPERTIES_SUCCESS');\nexport var searchPropertiesRequest = createRequestPending('SEARCH_PROPERTIES_REQUEST');\nexport var searchPropertiesFailure = createRequestFailure('SEARCH_PROPERTIES_FAILURE');\nexport var fetchProperties = function fetchProperties() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var params = propertiesSearchRequestQuerySelector(state);\n    var hash = plpQueryHashSelector(state);\n    dispatch(searchPropertiesRequest(hash));\n    return axios.get('/api/propertylistings/query', {\n      params: params,\n      paramsSerializer: stringify\n    }).then(function (res) {\n      // TODO Update to dynamic locale once we have that setup\n      var normalisedData = normaliseApiResponse('en-GB')(res.data);\n      dispatch(searchPropertiesSuccess(normalisedData, hash));\n    }).catch(function (ex) {\n      dispatch(searchPropertiesFailure(ex, hash));\n    });\n  };\n};\nexport var searchPropertyRequest = createStandardAction('SEARCH_PROPERTY_REQUEST');\nexport var searchPropertySuccess = createStandardAction('SEARCH_PROPERTY_SUCCESS')();\nexport var searchPropertyFailure = createStandardAction('SEARCH_PROPERTY_FAILURE')();\nexport var fetchPropertyIfRequired = function fetchPropertyIfRequired() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var propertyId = propertyIdSelector(state);\n    var params = propertySearchRequestQuerySelector(state);\n    var isPropertyDetailsLoaded = propertyDetailsSelector(state);\n\n    if (isPropertyDetailsLoaded) {\n      return;\n    }\n\n    dispatch(searchPropertyRequest());\n    return axios.get(\"/api/propertylisting/\".concat(propertyId), {\n      params: params\n    }).then(function (res) {\n      // TODO Update to dynamic locale once we have that setup\n      var normalisedData = docToProperty('en-GB')(res.data.Document);\n\n      if (!normalisedData) {\n        var err = Error('Failed mapping property');\n        return dispatch(searchPropertyFailure(err));\n      }\n\n      dispatch(searchPropertySuccess(_defineProperty({}, propertyId, normalisedData)));\n    }).catch(function (ex) {\n      dispatch(searchPropertyFailure(ex));\n    });\n  };\n};","map":{"version":3,"names":["axios","createStandardAction","normaliseApiResponse","createRequestPending","createRequestFailure","createRequestSuccess","propertiesSearchRequestQuerySelector","propertySearchRequestQuerySelector","plpQueryHashSelector","stringify","propertyIdSelector","propertyDetailsSelector","docToProperty","searchPropertiesSuccess","searchPropertiesRequest","searchPropertiesFailure","fetchProperties","dispatch","getState","state","params","hash","get","paramsSerializer","then","res","normalisedData","data","catch","ex","searchPropertyRequest","searchPropertySuccess","searchPropertyFailure","fetchPropertyIfRequired","propertyId","isPropertyDetailsLoaded","Document","err","Error"],"sources":["/Users/zentoo/Code/v2/src/redux/actions/searchProperties.ts"],"sourcesContent":["import axios from 'axios';\nimport { createStandardAction } from 'typesafe-actions';\n\nimport { normaliseApiResponse } from '../../api/normalisers';\nimport { State } from '../../types/state';\nimport { NormalisedSearchResult } from '../../types/results';\nimport {\n  createRequestPending,\n  createRequestFailure,\n  createRequestSuccess,\n} from '../../types/common/action-creators';\nimport {} from '../selectors/property-search-results';\nimport {\n  propertiesSearchRequestQuerySelector,\n  propertySearchRequestQuerySelector,\n} from '../selectors/search-api-request';\nimport { plpQueryHashSelector } from '../selectors/plp';\nimport { stringify } from 'query-string';\nimport { propertyIdSelector, propertyDetailsSelector } from '../selectors/pdp';\nimport { docToProperty } from '../../api/normalisers/doc-to-property-mapper';\nimport { Property } from '../../types/property';\nimport { Dictionary } from '../../types/common/dictionary';\n\nexport const searchPropertiesSuccess = createRequestSuccess<\n  NormalisedSearchResult,\n  'SEARCH_PROPERTIES_SUCCESS'\n>('SEARCH_PROPERTIES_SUCCESS');\nexport const searchPropertiesRequest = createRequestPending('SEARCH_PROPERTIES_REQUEST');\nexport const searchPropertiesFailure = createRequestFailure('SEARCH_PROPERTIES_FAILURE');\n\nexport const fetchProperties = () => (dispatch: Function, getState: () => State) => {\n  const state = getState();\n  const params = propertiesSearchRequestQuerySelector(state);\n  const hash = plpQueryHashSelector(state);\n  dispatch(searchPropertiesRequest(hash));\n\n  return axios\n    .get('/api/propertylistings/query', {\n      params,\n      paramsSerializer: stringify,\n    })\n    .then(res => {\n      // TODO Update to dynamic locale once we have that setup\n      const normalisedData = normaliseApiResponse('en-GB')(res.data);\n      dispatch(searchPropertiesSuccess(normalisedData, hash));\n    })\n    .catch(ex => {\n      dispatch(searchPropertiesFailure(ex, hash));\n    });\n};\n\nexport const searchPropertyRequest = createStandardAction('SEARCH_PROPERTY_REQUEST');\nexport const searchPropertySuccess = createStandardAction('SEARCH_PROPERTY_SUCCESS')<\n  Dictionary<Property>\n>();\nexport const searchPropertyFailure = createStandardAction('SEARCH_PROPERTY_FAILURE')<Error>();\n\nexport const fetchPropertyIfRequired = () => (dispatch: Function, getState: () => State) => {\n  const state = getState();\n  const propertyId = propertyIdSelector(state);\n  const params = propertySearchRequestQuerySelector(state);\n  const isPropertyDetailsLoaded = propertyDetailsSelector(state);\n  if (isPropertyDetailsLoaded) {\n    return;\n  }\n\n  dispatch(searchPropertyRequest());\n\n  return axios\n    .get(`/api/propertylisting/${propertyId}`, { params })\n    .then(res => {\n      // TODO Update to dynamic locale once we have that setup\n      const normalisedData = docToProperty('en-GB')(res.data.Document);\n      if (!normalisedData) {\n        const err = Error('Failed mapping property');\n        return dispatch(searchPropertyFailure(err));\n      }\n      dispatch(searchPropertySuccess({ [propertyId]: normalisedData }));\n    })\n    .catch(ex => {\n      dispatch(searchPropertyFailure(ex));\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}