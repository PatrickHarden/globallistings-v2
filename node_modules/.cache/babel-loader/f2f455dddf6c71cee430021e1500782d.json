{"ast":null,"code":"import axios from 'axios';\nimport { createRequestPending, createRequestFailure, createRequestSuccess } from '../../types/common/action-creators-singular';\nimport { configEndpointForCurrentUsageTypeSelector } from '../selectors/plp';\nexport var createFetchConfigRequest = createRequestPending('FETCH_CONFIG_REQUEST');\nexport var createFetchConfigFailure = createRequestFailure('FETCH_CONFIG_FAILURE');\nexport var createFetchConfigSuccess = createRequestSuccess('FETCH_CONFIG_SUCCESS'); // This will be used in the future to switch between multiple configs\n\nexport var fetchConfig = function fetchConfig() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var configEndpoint = configEndpointForCurrentUsageTypeSelector(state);\n    dispatch(createFetchConfigRequest());\n    return axios.get(configEndpoint).then(function (res) {\n      dispatch(createFetchConfigSuccess(res.data));\n    }).catch(function (ex) {\n      dispatch(createFetchConfigFailure(ex));\n    });\n  };\n};","map":{"version":3,"names":["axios","createRequestPending","createRequestFailure","createRequestSuccess","configEndpointForCurrentUsageTypeSelector","createFetchConfigRequest","createFetchConfigFailure","createFetchConfigSuccess","fetchConfig","dispatch","getState","state","configEndpoint","get","then","res","data","catch","ex"],"sources":["/Users/zentoo/Code/v2/src/redux/actions/config.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n  createRequestPending,\n  createRequestFailure,\n  createRequestSuccess,\n} from '../../types/common/action-creators-singular';\nimport { Config } from '../../types/config';\nimport { State } from '../../types/state';\nimport { configEndpointForCurrentUsageTypeSelector } from '../selectors/plp';\n\nexport const createFetchConfigRequest = createRequestPending('FETCH_CONFIG_REQUEST');\nexport const createFetchConfigFailure = createRequestFailure('FETCH_CONFIG_FAILURE');\nexport const createFetchConfigSuccess = createRequestSuccess<Config, 'FETCH_CONFIG_SUCCESS'>(\n  'FETCH_CONFIG_SUCCESS'\n);\n\n// This will be used in the future to switch between multiple configs\nexport const fetchConfig = () => (dispatch: Function, getState: () => State) => {\n  const state = getState();\n  const configEndpoint = configEndpointForCurrentUsageTypeSelector(state);\n\n  dispatch(createFetchConfigRequest());\n  return axios\n    .get(configEndpoint)\n    .then(res => {\n      dispatch(createFetchConfigSuccess(res.data));\n    })\n    .catch(ex => {\n      dispatch(createFetchConfigFailure(ex));\n    });\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,6CAJP;AAOA,SAASC,yCAAT,QAA0D,kBAA1D;AAEA,OAAO,IAAMC,wBAAwB,GAAGJ,oBAAoB,CAAC,sBAAD,CAArD;AACP,OAAO,IAAMK,wBAAwB,GAAGJ,oBAAoB,CAAC,sBAAD,CAArD;AACP,OAAO,IAAMK,wBAAwB,GAAGJ,oBAAoB,CAC1D,sBAD0D,CAArD,C,CAIP;;AACA,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc;EAAA,OAAM,UAACC,QAAD,EAAqBC,QAArB,EAA+C;IAC9E,IAAMC,KAAK,GAAGD,QAAQ,EAAtB;IACA,IAAME,cAAc,GAAGR,yCAAyC,CAACO,KAAD,CAAhE;IAEAF,QAAQ,CAACJ,wBAAwB,EAAzB,CAAR;IACA,OAAOL,KAAK,CACTa,GADI,CACAD,cADA,EAEJE,IAFI,CAEC,UAAAC,GAAG,EAAI;MACXN,QAAQ,CAACF,wBAAwB,CAACQ,GAAG,CAACC,IAAL,CAAzB,CAAR;IACD,CAJI,EAKJC,KALI,CAKE,UAAAC,EAAE,EAAI;MACXT,QAAQ,CAACH,wBAAwB,CAACY,EAAD,CAAzB,CAAR;IACD,CAPI,CAAP;EAQD,CAb0B;AAAA,CAApB"},"metadata":{},"sourceType":"module"}