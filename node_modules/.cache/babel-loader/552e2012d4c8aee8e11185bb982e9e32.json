{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { DistanceUnit } from '../../types/config';\nimport { googleBoundsToBounds } from '../../utils/bounds';\nimport { haversineRadius } from '../../utils/haversine';\nimport { paramsSelector } from './config/config';\nimport { defaultFiltersParamsSelectors } from './config/filters';\nimport { plpLocationRadiusSelector, plpLocationSelector } from './location';\nvar defaultRadiusSelector = createSelector(defaultFiltersParamsSelectors, function (_ref) {\n  var radius = _ref.radius;\n\n  if (Array.isArray(radius)) {\n    throw new Error('radius can not be an array');\n  }\n\n  return radius;\n});\nvar radiusSelector = createSelector(defaultRadiusSelector, plpLocationRadiusSelector, function (defaultRadius, radius) {\n  return radius ? radius : defaultRadius;\n});\nvar radiusTypeSelector = createSelector(paramsSelector, function (params) {\n  return params && params.RadiusType === 'Kilometers' ? DistanceUnit.km : DistanceUnit.miles;\n});\nexport var areaSelector = createSelector(radiusSelector, plpLocationSelector, radiusTypeSelector, function (radius, location, radiusType) {\n  if (!radius || radius === '' || radius === '0') {\n    return {\n      type: 'rectangle',\n      bounds: location.bounds,\n      center: location.center\n    };\n  }\n\n  var resultRadius = haversineRadius(location.bounds, location.center, Number.parseFloat(radius), radiusType);\n  var boundsCircle = new google.maps.Circle({\n    center: location.center,\n    radius: resultRadius * 1000\n  });\n  return {\n    type: 'circle',\n    radius: resultRadius,\n    bounds: googleBoundsToBounds(boundsCircle.getBounds()),\n    center: location.center\n  };\n});","map":{"version":3,"names":["createSelector","DistanceUnit","googleBoundsToBounds","haversineRadius","paramsSelector","defaultFiltersParamsSelectors","plpLocationRadiusSelector","plpLocationSelector","defaultRadiusSelector","radius","Array","isArray","Error","radiusSelector","defaultRadius","radiusTypeSelector","params","RadiusType","km","miles","areaSelector","location","radiusType","type","bounds","center","resultRadius","Number","parseFloat","boundsCircle","google","maps","Circle","getBounds"],"sources":["/Users/zentoo/Code/v2/src/redux/selectors/area.ts"],"sourcesContent":["import { createSelector } from 'reselect';\n\nimport { Bounds, LatLng } from '../../types/state';\nimport { DistanceUnit } from '../../types/config';\n\nimport { googleBoundsToBounds } from '../../utils/bounds';\nimport { haversineRadius } from '../../utils/haversine';\nimport { paramsSelector } from './config/config';\nimport { defaultFiltersParamsSelectors } from './config/filters';\n\nimport { plpLocationRadiusSelector, plpLocationSelector, locationParamsSelector } from './location';\n\ninterface BaseArea {\n  readonly bounds: Bounds;\n  readonly center: LatLng;\n}\n\nexport interface RectangleArea extends BaseArea {\n  readonly type: 'rectangle';\n}\n\nexport interface CircleArea extends BaseArea {\n  readonly radius: number;\n  readonly type: 'circle';\n}\n\nexport type Area = RectangleArea | CircleArea;\n\nconst defaultRadiusSelector = createSelector(\n  defaultFiltersParamsSelectors,\n  ({ radius }) => {\n    if (Array.isArray(radius)) {\n      throw new Error('radius can not be an array');\n    }\n\n    return radius;\n  }\n);\n\nconst radiusSelector = createSelector(\n  defaultRadiusSelector,\n  plpLocationRadiusSelector,\n  (defaultRadius, radius) => (radius ? radius : defaultRadius)\n);\n\nconst radiusTypeSelector = createSelector(\n  paramsSelector,\n  params => (params && params.RadiusType === 'Kilometers' ? DistanceUnit.km : DistanceUnit.miles)\n);\n\nexport const areaSelector = createSelector(\n  radiusSelector,\n  plpLocationSelector,\n  radiusTypeSelector,\n  (radius, location, radiusType): Area => {\n    if (!radius || radius === '' || radius === '0') {\n      return {\n        type: 'rectangle',\n        bounds: location.bounds,\n        center: location.center,\n      };\n    }\n\n    const resultRadius = haversineRadius(\n      location.bounds,\n      location.center,\n      Number.parseFloat(radius),\n      radiusType\n    );\n\n    const boundsCircle = new google.maps.Circle({\n      center: location.center,\n      radius: resultRadius * 1000,\n    });\n\n    return {\n      type: 'circle',\n      radius: resultRadius,\n      bounds: googleBoundsToBounds(boundsCircle.getBounds()),\n      center: location.center,\n    };\n  }\n);\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAGA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,6BAAT,QAA8C,kBAA9C;AAEA,SAASC,yBAAT,EAAoCC,mBAApC,QAAuF,YAAvF;AAkBA,IAAMC,qBAAqB,GAAGR,cAAc,CAC1CK,6BAD0C,EAE1C,gBAAgB;EAAA,IAAbI,MAAa,QAAbA,MAAa;;EACd,IAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;IACzB,MAAM,IAAIG,KAAJ,CAAU,4BAAV,CAAN;EACD;;EAED,OAAOH,MAAP;AACD,CARyC,CAA5C;AAWA,IAAMI,cAAc,GAAGb,cAAc,CACnCQ,qBADmC,EAEnCF,yBAFmC,EAGnC,UAACQ,aAAD,EAAgBL,MAAhB;EAAA,OAA4BA,MAAM,GAAGA,MAAH,GAAYK,aAA9C;AAAA,CAHmC,CAArC;AAMA,IAAMC,kBAAkB,GAAGf,cAAc,CACvCI,cADuC,EAEvC,UAAAY,MAAM;EAAA,OAAKA,MAAM,IAAIA,MAAM,CAACC,UAAP,KAAsB,YAAhC,GAA+ChB,YAAY,CAACiB,EAA5D,GAAiEjB,YAAY,CAACkB,KAAnF;AAAA,CAFiC,CAAzC;AAKA,OAAO,IAAMC,YAAY,GAAGpB,cAAc,CACxCa,cADwC,EAExCN,mBAFwC,EAGxCQ,kBAHwC,EAIxC,UAACN,MAAD,EAASY,QAAT,EAAmBC,UAAnB,EAAwC;EACtC,IAAI,CAACb,MAAD,IAAWA,MAAM,KAAK,EAAtB,IAA4BA,MAAM,KAAK,GAA3C,EAAgD;IAC9C,OAAO;MACLc,IAAI,EAAE,WADD;MAELC,MAAM,EAAEH,QAAQ,CAACG,MAFZ;MAGLC,MAAM,EAAEJ,QAAQ,CAACI;IAHZ,CAAP;EAKD;;EAED,IAAMC,YAAY,GAAGvB,eAAe,CAClCkB,QAAQ,CAACG,MADyB,EAElCH,QAAQ,CAACI,MAFyB,EAGlCE,MAAM,CAACC,UAAP,CAAkBnB,MAAlB,CAHkC,EAIlCa,UAJkC,CAApC;EAOA,IAAMO,YAAY,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAhB,CAAuB;IAC1CP,MAAM,EAAEJ,QAAQ,CAACI,MADyB;IAE1ChB,MAAM,EAAEiB,YAAY,GAAG;EAFmB,CAAvB,CAArB;EAKA,OAAO;IACLH,IAAI,EAAE,QADD;IAELd,MAAM,EAAEiB,YAFH;IAGLF,MAAM,EAAEtB,oBAAoB,CAAC2B,YAAY,CAACI,SAAb,EAAD,CAHvB;IAILR,MAAM,EAAEJ,QAAQ,CAACI;EAJZ,CAAP;AAMD,CA/BuC,CAAnC"},"metadata":{},"sourceType":"module"}