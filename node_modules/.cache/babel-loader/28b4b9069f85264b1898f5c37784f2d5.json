{"ast":null,"code":"import _objectSpread from \"/Users/zentoo/Code/v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// @ts-nocheck\nimport { createSelector } from 'reselect';\nimport renameKeys from '../../utils/renameKeys';\nimport { paramsSelector } from './config/config';\nimport { querySelector, plpTransactionTypeSelector } from './location';\nimport { configSelector, filtersSelector } from './state';\nimport { boundsToSquare } from '../../utils/boundsToSquare';\nimport { areaSelector } from './area';\nimport { TransactionTypeValue } from '../../types/config';\nimport { filter, is } from 'ramda';\nimport { filterParamsCombiner } from './config/range-filters';\nvar QueryToApiRequestParamsMapping = {\n  sort: 'Sort'\n};\nvar SelectProperties = 'Dynamic.PrimaryImage,Common.ActualAddress,Common.Charges,Common.NumberOfBedrooms,Common.PrimaryKey,Common.Coordinate,Common.Aspects,Common.ListingCount,Common.IsParent,Common.ContactGroup,Common.Highlights,Common.Walkthrough,Common.MinimumSize,Common.MaximumSize,Common.TotalSize,Common.GeoLocation,Common.Sizes';\nvar mappedApiRequestQuery = createSelector(querySelector, function (query) {\n  return renameKeys(QueryToApiRequestParamsMapping, query);\n});\nvar locationParamsSelector = createSelector(areaSelector, function (area) {\n  switch (area.type) {\n    case 'circle':\n      return {\n        radius: area.radius.toString(),\n        Lat: area.center.lat,\n        Lon: area.center.lng\n      };\n\n    case 'rectangle':\n      return {\n        PolygonFilters: JSON.stringify([boundsToSquare(area.bounds)])\n      };\n  }\n});\nexport var paginationSelector = createSelector(configSelector, function (config) {\n  return {\n    PageSize: config.limitListMapResults ? Number(config.limitListMapResults) : undefined,\n    Page: 1 // TODO: Hook up to pagination functionality\n\n  };\n});\nvar transactionTypeMapping = {\n  sale: TransactionTypeValue.isSale,\n  letting: TransactionTypeValue.isLetting\n};\nexport var transactionTypeParamsSelector = createSelector(plpTransactionTypeSelector, function (transactionType) {\n  var result = transactionTypeMapping[transactionType];\n\n  if (!result) {\n    throw new Error(\"\".concat(transactionType, \" is not a supported transaction type\"));\n  }\n\n  return {\n    'Common.Aspects': result\n  };\n}); // NOTE: we have to cast to the dictionary, as the typing can't infer that undefined will be filters out with is(String)\n\nvar queryParamsSelector = createSelector(querySelector, function (query) {\n  return filter(is(String), query);\n});\nvar rangeFilterParamsSelector = createSelector(queryParamsSelector, filtersSelector, filterParamsCombiner);\nexport var propertiesSearchRequestQuerySelector = createSelector(mappedApiRequestQuery, locationParamsSelector, paramsSelector, paginationSelector, transactionTypeParamsSelector, rangeFilterParamsSelector, function (query, locationParams, defaultParams, pagination, transactionTypeParams, rangeFilterParams) {\n  return _objectSpread({}, pagination, defaultParams, locationParams, query, transactionTypeParams, rangeFilterParams);\n});\nexport var propertySearchRequestQuerySelector = createSelector(paramsSelector, function (defaultParams) {\n  return _objectSpread({}, defaultParams, {\n    _select: SelectProperties\n  });\n});","map":{"version":3,"names":["createSelector","renameKeys","paramsSelector","querySelector","plpTransactionTypeSelector","configSelector","filtersSelector","boundsToSquare","areaSelector","TransactionTypeValue","filter","is","filterParamsCombiner","QueryToApiRequestParamsMapping","sort","SelectProperties","mappedApiRequestQuery","query","locationParamsSelector","area","type","radius","toString","Lat","center","lat","Lon","lng","PolygonFilters","JSON","stringify","bounds","paginationSelector","config","PageSize","limitListMapResults","Number","undefined","Page","transactionTypeMapping","sale","isSale","letting","isLetting","transactionTypeParamsSelector","transactionType","result","Error","queryParamsSelector","String","rangeFilterParamsSelector","propertiesSearchRequestQuerySelector","locationParams","defaultParams","pagination","transactionTypeParams","rangeFilterParams","propertySearchRequestQuerySelector","_select"],"sources":["/Users/zentoo/Code/v2/src/redux/selectors/search-api-request.ts"],"sourcesContent":["// @ts-nocheck\nimport { PlpQuery, TransactionType } from '../../types/plp';\nimport { createSelector } from 'reselect';\nimport renameKeys from '../../utils/renameKeys';\nimport { paramsSelector } from './config/config';\nimport { querySelector, plpTransactionTypeSelector } from './location';\nimport { configSelector, filtersSelector } from './state';\nimport { boundsToSquare } from '../../utils/boundsToSquare';\nimport { areaSelector } from './area';\nimport { TransactionTypeValue } from '../../types/config';\nimport { filter, is, Dictionary } from 'ramda';\nimport { filterParamsCombiner } from './config/range-filters';\n\nconst QueryToApiRequestParamsMapping: { [P in keyof PlpQuery]?: string } = {\n  sort: 'Sort',\n};\n\nconst SelectProperties =\n  'Dynamic.PrimaryImage,Common.ActualAddress,Common.Charges,Common.NumberOfBedrooms,Common.PrimaryKey,Common.Coordinate,Common.Aspects,Common.ListingCount,Common.IsParent,Common.ContactGroup,Common.Highlights,Common.Walkthrough,Common.MinimumSize,Common.MaximumSize,Common.TotalSize,Common.GeoLocation,Common.Sizes';\n\nconst mappedApiRequestQuery = createSelector(querySelector, query =>\n  renameKeys(QueryToApiRequestParamsMapping, query)\n);\n\nconst locationParamsSelector = createSelector(areaSelector, area => {\n  switch (area.type) {\n    case 'circle':\n      return {\n        radius: area.radius.toString(),\n        Lat: area.center.lat,\n        Lon: area.center.lng,\n      };\n    case 'rectangle':\n      return {\n        PolygonFilters: JSON.stringify([boundsToSquare(area.bounds)]),\n      };\n  }\n});\n\nexport const paginationSelector = createSelector(configSelector, config => ({\n  PageSize: config.limitListMapResults ? Number(config.limitListMapResults) : undefined,\n  Page: 1, // TODO: Hook up to pagination functionality\n}));\n\nconst transactionTypeMapping: { [K in TransactionType]: TransactionTypeValue | undefined } = {\n  sale: TransactionTypeValue.isSale,\n  letting: TransactionTypeValue.isLetting,\n};\n\nexport const transactionTypeParamsSelector = createSelector(\n  plpTransactionTypeSelector,\n  transactionType => {\n    const result = transactionTypeMapping[transactionType];\n    if (!result) {\n      throw new Error(`${transactionType} is not a supported transaction type`);\n    }\n\n    return { 'Common.Aspects': result };\n  }\n);\n\n// NOTE: we have to cast to the dictionary, as the typing can't infer that undefined will be filters out with is(String)\nconst queryParamsSelector = createSelector(\n  querySelector,\n  query => filter(is(String), query) as Dictionary<string>\n);\n\nconst rangeFilterParamsSelector = createSelector(\n  queryParamsSelector,\n  filtersSelector,\n  filterParamsCombiner\n);\n\nexport const propertiesSearchRequestQuerySelector = createSelector(\n  mappedApiRequestQuery,\n  locationParamsSelector,\n  paramsSelector,\n  paginationSelector,\n  transactionTypeParamsSelector,\n  rangeFilterParamsSelector,\n  (query, locationParams, defaultParams, pagination, transactionTypeParams, rangeFilterParams) => ({\n    ...pagination,\n    ...defaultParams,\n    ...locationParams,\n    ...query,\n    ...transactionTypeParams,\n    ...rangeFilterParams,\n    // _select: SelectProperties,\n  })\n);\n\nexport const propertySearchRequestQuerySelector = createSelector(paramsSelector, defaultParams => ({\n  ...defaultParams,\n  _select: SelectProperties,\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}