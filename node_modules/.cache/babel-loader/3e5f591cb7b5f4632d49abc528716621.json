{"ast":null,"code":"var distanceConversions = {\n  miles: 1609.3,\n  km: 1000\n};\n\nvar deg2rad = function deg2rad(deg) {\n  return deg * (Math.PI / 180);\n};\n\nvar EARTH_RADIUS = 6371;\nexport var haversineRadius = function haversineRadius(bounds, centre, radius, uom) {\n  var _bounds$ne = bounds.ne,\n      neLat = _bounds$ne.lat,\n      neLon = _bounds$ne.lng;\n  var centreLat = centre.lat,\n      centreLon = centre.lng;\n  var dLat = deg2rad(neLat - centreLat); // deg2rad below\n\n  var dLon = deg2rad(neLon - centreLon);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(centreLat)) * Math.cos(deg2rad(neLat)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = EARTH_RADIUS * c * 1000; // Distance in metres\n\n  var calculatedRadius = d / distanceConversions[uom];\n  return calculatedRadius + radius;\n};","map":{"version":3,"names":["distanceConversions","miles","km","deg2rad","deg","Math","PI","EARTH_RADIUS","haversineRadius","bounds","centre","radius","uom","ne","neLat","lat","neLon","lng","centreLat","centreLon","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","calculatedRadius"],"sources":["/Users/zentoo/Code/v2/src/utils/haversine.ts"],"sourcesContent":["import { Bounds, LatLng } from '../types/state';\nimport { DistanceUnit } from '../types/config';\n\nconst distanceConversions = {\n  miles: 1609.3,\n  km: 1000,\n};\n\nconst deg2rad = (deg: number) => deg * (Math.PI / 180);\n\nconst EARTH_RADIUS = 6371;\n\nexport const haversineRadius = (\n  bounds: Bounds,\n  centre: LatLng,\n  radius: number,\n  uom: DistanceUnit\n) => {\n  const { lat: neLat, lng: neLon } = bounds.ne;\n  const { lat: centreLat, lng: centreLon } = centre;\n\n  const dLat = deg2rad(neLat - centreLat); // deg2rad below\n  const dLon = deg2rad(neLon - centreLon);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(centreLat)) *\n      Math.cos(deg2rad(neLat)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = EARTH_RADIUS * c * 1000; // Distance in metres\n\n  const calculatedRadius = d / distanceConversions[uom];\n\n  return calculatedRadius + radius;\n};\n"],"mappings":"AAGA,IAAMA,mBAAmB,GAAG;EAC1BC,KAAK,EAAE,MADmB;EAE1BC,EAAE,EAAE;AAFsB,CAA5B;;AAKA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;EAAA,OAAiBA,GAAG,IAAIC,IAAI,CAACC,EAAL,GAAU,GAAd,CAApB;AAAA,CAAhB;;AAEA,IAAMC,YAAY,GAAG,IAArB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAC7BC,MAD6B,EAE7BC,MAF6B,EAG7BC,MAH6B,EAI7BC,GAJ6B,EAK1B;EAAA,iBACgCH,MAAM,CAACI,EADvC;EAAA,IACUC,KADV,cACKC,GADL;EAAA,IACsBC,KADtB,cACiBC,GADjB;EAAA,IAEUC,SAFV,GAEwCR,MAFxC,CAEKK,GAFL;EAAA,IAE0BI,SAF1B,GAEwCT,MAFxC,CAEqBO,GAFrB;EAIH,IAAMG,IAAI,GAAGjB,OAAO,CAACW,KAAK,GAAGI,SAAT,CAApB,CAJG,CAIsC;;EACzC,IAAMG,IAAI,GAAGlB,OAAO,CAACa,KAAK,GAAGG,SAAT,CAApB;EACA,IAAMG,CAAC,GACLjB,IAAI,CAACkB,GAAL,CAASH,IAAI,GAAG,CAAhB,IAAqBf,IAAI,CAACkB,GAAL,CAASH,IAAI,GAAG,CAAhB,CAArB,GACAf,IAAI,CAACmB,GAAL,CAASrB,OAAO,CAACe,SAAD,CAAhB,IACEb,IAAI,CAACmB,GAAL,CAASrB,OAAO,CAACW,KAAD,CAAhB,CADF,GAEET,IAAI,CAACkB,GAAL,CAASF,IAAI,GAAG,CAAhB,CAFF,GAGEhB,IAAI,CAACkB,GAAL,CAASF,IAAI,GAAG,CAAhB,CALJ;EAOA,IAAMI,CAAC,GAAG,IAAIpB,IAAI,CAACqB,KAAL,CAAWrB,IAAI,CAACsB,IAAL,CAAUL,CAAV,CAAX,EAAyBjB,IAAI,CAACsB,IAAL,CAAU,IAAIL,CAAd,CAAzB,CAAd;EACA,IAAMM,CAAC,GAAGrB,YAAY,GAAGkB,CAAf,GAAmB,IAA7B,CAdG,CAcgC;;EAEnC,IAAMI,gBAAgB,GAAGD,CAAC,GAAG5B,mBAAmB,CAACY,GAAD,CAAhD;EAEA,OAAOiB,gBAAgB,GAAGlB,MAA1B;AACD,CAxBM"},"metadata":{},"sourceType":"module"}