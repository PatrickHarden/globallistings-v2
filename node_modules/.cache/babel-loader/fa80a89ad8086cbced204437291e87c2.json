{"ast":null,"code":"import _slicedToArray from \"/Users/zentoo/Code/v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/zentoo/Code/v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n// @ts-nocheck\nimport { mergeAll, chain, prop, not, isNil, assocPath, mergeDeepRight, test, keys, filter, compose, map, reduce } from 'ramda';\nimport { FilterType } from '../../../types/config';\nimport { splitObjectBy } from '../../../utils/split-object-by';\nvar isMinFilterTest = /(_min)$/gi;\nvar isMaxFilterTest = /(_max)$/gi;\nexport var isRangeFilter = function isRangeFilter(filterName) {\n  return test(isMinFilterTest, filterName) || test(isMaxFilterTest, filterName);\n};\n\nvar rangeKeysObjPred = function rangeKeysObjPred(_, key) {\n  return isRangeFilter(key);\n};\n\nvar buildRangeValue = function buildRangeValue() {\n  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var includePOA = arguments.length > 2 ? arguments[2] : undefined;\n  return min !== '' || max !== '' ? \"range[\".concat(min, \"|\").concat(max, \"|\").concat(includePOA ? 'include' : 'exclude', \"]\") : undefined;\n};\n/**\n *\n * @param rangeFilterName a filter name in a format of `price_min` or `price_max`\n */\n\n\nvar splitRangeFilterName = function splitRangeFilterName(rangeFilterName) {\n  return {\n    name: rangeFilterName.slice(0, -4),\n    type: rangeFilterName.slice(rangeFilterName.length - 3, rangeFilterName.length)\n  };\n};\n\nvar getDefaultRangeFilterParams = function getDefaultRangeFilterParams(filters) {\n  return compose(mergeAll, chain(function (f) {\n    return f.name.split('|').map(function (filterName) {\n      return _defineProperty({}, filterName, {\n        min: prop('value', f.minValues.find(function (minFilter) {\n          return minFilter.default;\n        })),\n        max: prop('value', f.maxValues.find(function (maxFilter) {\n          return maxFilter.default;\n        }))\n      });\n    });\n  }))(filters);\n};\n\nvar getFilter = function getFilter(rangeFilter, filterName) {\n  return rangeFilter.find(function (f) {\n    return f.name.includes(filterName) && f.type === FilterType.range;\n  });\n};\n\nvar notNil = compose(not, isNil);\nvar mergeAllDeepRight = reduce(mergeDeepRight, {});\n\nvar filterNameToParam = function filterNameToParam(rangeFilterParams, rangeFilters) {\n  return function (filterName) {\n    var range = rangeFilterParams[filterName];\n    var correspondingFilter = getFilter(rangeFilters, filterName);\n\n    if (!correspondingFilter) {\n      throw new Error('Cannot perform range value conversion on a non range filter');\n    }\n\n    var multiFilterParams = correspondingFilter.name.split('|');\n    var rangeValue;\n\n    if (multiFilterParams.length === 1) {\n      rangeValue = buildRangeValue(range.min, range.max, correspondingFilter.includePOA);\n    } else {\n      if (filterName === multiFilterParams[0]) {\n        rangeValue = buildRangeValue(undefined, range.max, correspondingFilter.includePOA);\n      }\n\n      if (filterName === multiFilterParams[1]) {\n        rangeValue = buildRangeValue(range.min, undefined, correspondingFilter.includePOA);\n      }\n    }\n\n    return rangeValue ? _defineProperty({}, filterName, rangeValue) : undefined;\n  };\n};\n\nexport var filterParamsCombiner = function filterParamsCombiner(params, filters) {\n  var passThroughOtherParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var passDefaultParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var _compose = compose(splitObjectBy(rangeKeysObjPred), filter(notNil))(params),\n      _compose2 = _slicedToArray(_compose, 2),\n      rangeParams = _compose2[0],\n      otherParams = _compose2[1];\n\n  var rangeFilters = filter(function (f) {\n    return f.type === FilterType.range;\n  }, filters);\n  var selectedFilters = compose(mergeAllDeepRight, chain(function (rangeParamKey) {\n    var value = rangeParams[rangeParamKey];\n\n    var _splitRangeFilterName = splitRangeFilterName(rangeParamKey),\n        name = _splitRangeFilterName.name,\n        type = _splitRangeFilterName.type;\n\n    return name.split('|').map(function (newName) {\n      return assocPath([newName, type], value, {});\n    });\n  }), keys)(rangeParams);\n  var mergeRangeParams = mergeDeepRight(passDefaultParams ? getDefaultRangeFilterParams(rangeFilters) : function () {\n    return {};\n  }, selectedFilters);\n  var rangeFilterParams = compose(mergeAll, map(filterNameToParam(mergeRangeParams, rangeFilters)), keys)(mergeRangeParams);\n\n  if (passThroughOtherParams) {\n    return mergeDeepRight(otherParams, rangeFilterParams);\n  }\n\n  return rangeFilterParams;\n};","map":{"version":3,"names":["mergeAll","chain","prop","not","isNil","assocPath","mergeDeepRight","test","keys","filter","compose","map","reduce","FilterType","splitObjectBy","isMinFilterTest","isMaxFilterTest","isRangeFilter","filterName","rangeKeysObjPred","_","key","buildRangeValue","min","max","includePOA","undefined","splitRangeFilterName","rangeFilterName","name","slice","type","length","getDefaultRangeFilterParams","filters","f","split","minValues","find","minFilter","default","maxValues","maxFilter","getFilter","rangeFilter","includes","range","notNil","mergeAllDeepRight","filterNameToParam","rangeFilterParams","rangeFilters","correspondingFilter","Error","multiFilterParams","rangeValue","filterParamsCombiner","params","passThroughOtherParams","passDefaultParams","rangeParams","otherParams","selectedFilters","rangeParamKey","value","newName","mergeRangeParams"],"sources":["/Users/zentoo/Code/v2/src/redux/selectors/config/range-filters.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  mergeAll,\n  chain,\n  prop,\n  not,\n  isNil,\n  assocPath,\n  mergeDeepRight,\n  test,\n  keys,\n  filter,\n  compose,\n  map,\n  reduce,\n} from 'ramda';\n\nimport { Maybe } from '../../../types/common/maybe';\nimport { Dictionary } from '../../../types/common/dictionary';\nimport { RangeFilter, FilterType, Filter } from '../../../types/config';\nimport { splitObjectBy } from '../../../utils/split-object-by';\n\nconst isMinFilterTest = /(_min)$/gi;\nconst isMaxFilterTest = /(_max)$/gi;\n\nexport const isRangeFilter = (filterName: string) =>\n  test(isMinFilterTest, filterName) || test(isMaxFilterTest, filterName);\n\nconst rangeKeysObjPred = (_: string, key: string) => isRangeFilter(key);\n\nconst buildRangeValue = (min: Maybe<string> = '', max: Maybe<string> = '', includePOA?: boolean) =>\n  min !== '' || max !== ''\n    ? `range[${min}|${max}|${includePOA ? 'include' : 'exclude'}]`\n    : undefined;\n\n/**\n *\n * @param rangeFilterName a filter name in a format of `price_min` or `price_max`\n */\nconst splitRangeFilterName = (rangeFilterName: string) => ({\n  name: rangeFilterName.slice(0, -4),\n  type: rangeFilterName.slice(rangeFilterName.length - 3, rangeFilterName.length),\n});\n\ntype RangeFilterParam = Dictionary<{ min: string; max: string }>;\n\nconst getDefaultRangeFilterParams = (filters: RangeFilter[]) =>\n  compose(\n    mergeAll as any,\n    chain((f: RangeFilter): RangeFilterParam[] =>\n      f.name.split('|').map(filterName => ({\n        [filterName]: {\n          min: prop('value', f.minValues.find(minFilter => minFilter.default)!),\n          max: prop('value', f.maxValues.find(maxFilter => maxFilter.default)!),\n        },\n      }))\n    )\n  )(filters);\n\nconst getFilter = (rangeFilter: RangeFilter[], filterName: string): Maybe<RangeFilter> =>\n  rangeFilter.find(f => f.name.includes(filterName) && f.type === FilterType.range);\n\nconst notNil = compose(not, isNil);\n\nconst mergeAllDeepRight = reduce(mergeDeepRight, {});\n\nconst filterNameToParam = (rangeFilterParams: RangeFilterParam, rangeFilters: RangeFilter[]) => (\n  filterName: string\n) => {\n  const range = rangeFilterParams[filterName]!;\n  const correspondingFilter = getFilter(rangeFilters, filterName);\n\n  if (!correspondingFilter) {\n    throw new Error('Cannot perform range value conversion on a non range filter');\n  }\n\n  const multiFilterParams = correspondingFilter.name.split('|');\n  let rangeValue;\n\n  if (multiFilterParams.length === 1) {\n    rangeValue = buildRangeValue(range.min, range.max, correspondingFilter.includePOA);\n  } else {\n    if (filterName === multiFilterParams[0]) {\n      rangeValue = buildRangeValue(undefined, range.max, correspondingFilter.includePOA);\n    }\n    if (filterName === multiFilterParams[1]) {\n      rangeValue = buildRangeValue(range.min, undefined, correspondingFilter.includePOA);\n    }\n  }\n\n  return rangeValue\n    ? {\n        [filterName]: rangeValue,\n      }\n    : undefined;\n};\n\nexport const filterParamsCombiner = (\n  params: Dictionary<string>,\n  filters: Filter[],\n  passThroughOtherParams: boolean = false,\n  passDefaultParams: boolean = true\n) => {\n  const [rangeParams, otherParams] = compose(\n    splitObjectBy(rangeKeysObjPred),\n    filter(notNil)\n  )(params);\n\n  const rangeFilters = filter(f => f.type === FilterType.range, filters) as RangeFilter[];\n\n  const selectedFilters = compose(\n    mergeAllDeepRight,\n    chain((rangeParamKey: string) => {\n      const value = rangeParams[rangeParamKey]!;\n      const { name, type } = splitRangeFilterName(rangeParamKey);\n      return name.split('|').map(newName => assocPath([newName, type], value, {}));\n    }),\n    keys\n  )(rangeParams);\n\n  const mergeRangeParams = mergeDeepRight(\n    passDefaultParams ? getDefaultRangeFilterParams(rangeFilters) : () => ({}),\n    selectedFilters\n  );\n\n  const rangeFilterParams = compose(\n    mergeAll as any,\n    map(filterNameToParam(mergeRangeParams as any, rangeFilters)),\n    keys\n  )(mergeRangeParams);\n\n  if (passThroughOtherParams) {\n    return mergeDeepRight(otherParams, rangeFilterParams);\n  }\n\n  return rangeFilterParams;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}