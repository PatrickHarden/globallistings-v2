{"ast":null,"code":"import _objectSpread from \"/Users/zentoo/Code/v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSelector } from 'reselect';\nimport { locationSelector, geocodeSelector } from './state';\nimport { parseUrl } from 'query-string';\nimport { plpUrlPathParamsSelector, pathParamsSelector } from './match';\nexport var queryStringSelector = createSelector(locationSelector, function (location) {\n  return location.search;\n});\nexport var pathSelector = createSelector(locationSelector, function (location) {\n  return location.pathname;\n});\nexport var locationQuerySelector = createSelector(queryStringSelector, function (queryString) {\n  return parseUrl(queryString).query;\n});\nexport var querySelector = createSelector(queryStringSelector, function (location) {\n  return parseUrl(location).query;\n});\nexport var locationParamsSelector = createSelector(locationQuerySelector, pathParamsSelector, function (query, params) {\n  return _objectSpread({}, query, params);\n});\nexport var plpLocationNameSelector = createSelector(plpUrlPathParamsSelector, function (params) {\n  return params.location;\n});\nexport var plpTransactionTypeSelector = createSelector(plpUrlPathParamsSelector, function (params) {\n  return params.transactionType;\n});\nexport var plpLocationSelector = createSelector(plpLocationNameSelector, geocodeSelector, function (locationName, geocode) {\n  var location = geocode[locationName];\n\n  if (!location) {\n    throw new Error('Failed retrieving geocoding for the location');\n  }\n\n  return location;\n});\nexport var plpLocationRadiusSelector = createSelector(locationQuerySelector, function (_ref) {\n  var radius = _ref.radius;\n\n  if (Array.isArray(radius)) {\n    throw new Error('radius can not be an array');\n  }\n\n  return radius;\n});","map":{"version":3,"names":["createSelector","locationSelector","geocodeSelector","parseUrl","plpUrlPathParamsSelector","pathParamsSelector","queryStringSelector","location","search","pathSelector","pathname","locationQuerySelector","queryString","query","querySelector","locationParamsSelector","params","plpLocationNameSelector","plpTransactionTypeSelector","transactionType","plpLocationSelector","locationName","geocode","Error","plpLocationRadiusSelector","radius","Array","isArray"],"sources":["/Users/zentoo/Code/v2/src/redux/selectors/location.ts"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { locationSelector, geocodeSelector } from './state';\nimport { parseUrl } from 'query-string';\nimport { plpUrlPathParamsSelector, pathParamsSelector } from './match';\n\nexport const queryStringSelector = createSelector(\n  locationSelector,\n  location => location.search\n);\n\nexport const pathSelector = createSelector(\n  locationSelector,\n  location => location.pathname\n);\n\nexport const locationQuerySelector = createSelector(\n  queryStringSelector,\n  queryString => parseUrl(queryString).query\n);\n\nexport const querySelector = createSelector(\n  queryStringSelector,\n  location => parseUrl(location).query\n);\n\nexport const locationParamsSelector = createSelector(\n  locationQuerySelector,\n  pathParamsSelector,\n  (query, params) => ({ ...query, ...params })\n);\n\nexport const plpLocationNameSelector = createSelector(\n  plpUrlPathParamsSelector,\n  params => params.location\n);\n\nexport const plpTransactionTypeSelector = createSelector(\n  plpUrlPathParamsSelector,\n  params => params.transactionType\n);\n\nexport const plpLocationSelector = createSelector(\n  plpLocationNameSelector,\n  geocodeSelector,\n  (locationName, geocode) => {\n    const location = geocode[locationName];\n    if (!location) {\n      throw new Error('Failed retrieving geocoding for the location');\n    }\n\n    return location;\n  }\n);\n\nexport const plpLocationRadiusSelector = createSelector(\n  locationQuerySelector,\n  ({ radius }) => {\n    if (Array.isArray(radius)) {\n      throw new Error('radius can not be an array');\n    }\n\n    return radius;\n  }\n);\n"],"mappings":";AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,SAAlD;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,wBAAT,EAAmCC,kBAAnC,QAA6D,SAA7D;AAEA,OAAO,IAAMC,mBAAmB,GAAGN,cAAc,CAC/CC,gBAD+C,EAE/C,UAAAM,QAAQ;EAAA,OAAIA,QAAQ,CAACC,MAAb;AAAA,CAFuC,CAA1C;AAKP,OAAO,IAAMC,YAAY,GAAGT,cAAc,CACxCC,gBADwC,EAExC,UAAAM,QAAQ;EAAA,OAAIA,QAAQ,CAACG,QAAb;AAAA,CAFgC,CAAnC;AAKP,OAAO,IAAMC,qBAAqB,GAAGX,cAAc,CACjDM,mBADiD,EAEjD,UAAAM,WAAW;EAAA,OAAIT,QAAQ,CAACS,WAAD,CAAR,CAAsBC,KAA1B;AAAA,CAFsC,CAA5C;AAKP,OAAO,IAAMC,aAAa,GAAGd,cAAc,CACzCM,mBADyC,EAEzC,UAAAC,QAAQ;EAAA,OAAIJ,QAAQ,CAACI,QAAD,CAAR,CAAmBM,KAAvB;AAAA,CAFiC,CAApC;AAKP,OAAO,IAAME,sBAAsB,GAAGf,cAAc,CAClDW,qBADkD,EAElDN,kBAFkD,EAGlD,UAACQ,KAAD,EAAQG,MAAR;EAAA,yBAAyBH,KAAzB,EAAmCG,MAAnC;AAAA,CAHkD,CAA7C;AAMP,OAAO,IAAMC,uBAAuB,GAAGjB,cAAc,CACnDI,wBADmD,EAEnD,UAAAY,MAAM;EAAA,OAAIA,MAAM,CAACT,QAAX;AAAA,CAF6C,CAA9C;AAKP,OAAO,IAAMW,0BAA0B,GAAGlB,cAAc,CACtDI,wBADsD,EAEtD,UAAAY,MAAM;EAAA,OAAIA,MAAM,CAACG,eAAX;AAAA,CAFgD,CAAjD;AAKP,OAAO,IAAMC,mBAAmB,GAAGpB,cAAc,CAC/CiB,uBAD+C,EAE/Cf,eAF+C,EAG/C,UAACmB,YAAD,EAAeC,OAAf,EAA2B;EACzB,IAAMf,QAAQ,GAAGe,OAAO,CAACD,YAAD,CAAxB;;EACA,IAAI,CAACd,QAAL,EAAe;IACb,MAAM,IAAIgB,KAAJ,CAAU,8CAAV,CAAN;EACD;;EAED,OAAOhB,QAAP;AACD,CAV8C,CAA1C;AAaP,OAAO,IAAMiB,yBAAyB,GAAGxB,cAAc,CACrDW,qBADqD,EAErD,gBAAgB;EAAA,IAAbc,MAAa,QAAbA,MAAa;;EACd,IAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;IACzB,MAAM,IAAIF,KAAJ,CAAU,4BAAV,CAAN;EACD;;EAED,OAAOE,MAAP;AACD,CARoD,CAAhD"},"metadata":{},"sourceType":"module"}