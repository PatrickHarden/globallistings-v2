{"ast":null,"code":"export var TransactionType;\n\n(function (TransactionType) {\n  TransactionType[\"sale\"] = \"sale\";\n  TransactionType[\"letting\"] = \"letting\";\n})(TransactionType || (TransactionType = {}));\n\nexport function isPlpPathValue(value) {\n  if (value === 'usageType' || value === 'transactionType' || value === 'location') {\n    return true;\n  }\n\n  return false;\n}\nexport function isPlpPathObject(path) {\n  var p = path;\n\n  if (!p) {\n    return false;\n  }\n\n  return !!p.usageType && !!p.transactionType && !!p.location;\n}","map":{"version":3,"names":["TransactionType","isPlpPathValue","value","isPlpPathObject","path","p","usageType","transactionType","location"],"sources":["/Users/zentoo/Code/v2/src/types/plp.ts"],"sourcesContent":["export interface PlpQuery {\n  readonly aspects?: string;\n  readonly sort?: string;\n  readonly radius?: string;\n}\n\nexport enum TransactionType {\n  sale = 'sale',\n  letting = 'letting',\n}\n\nexport interface PlpPath {\n  readonly usageType: string;\n  readonly transactionType: TransactionType;\n  readonly location: string;\n}\n\nexport function isPlpPathValue(value: string): value is keyof PlpPath {\n  if (value === 'usageType' || value === 'transactionType' || value === 'location') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isPlpPathObject(path: object | null): path is PlpPath {\n  const p = path as PlpPath;\n  if (!p) {\n    return false;\n  }\n  return !!p.usageType && !!p.transactionType && !!p.location;\n}\n"],"mappings":"AAMA,WAAYA,eAAZ;;WAAYA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e;;AAWZ,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+D;EACpE,IAAIA,KAAK,KAAK,WAAV,IAAyBA,KAAK,KAAK,iBAAnC,IAAwDA,KAAK,KAAK,UAAtE,EAAkF;IAChF,OAAO,IAAP;EACD;;EAED,OAAO,KAAP;AACD;AAED,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+D;EACpE,IAAMC,CAAC,GAAGD,IAAV;;EACA,IAAI,CAACC,CAAL,EAAQ;IACN,OAAO,KAAP;EACD;;EACD,OAAO,CAAC,CAACA,CAAC,CAACC,SAAJ,IAAiB,CAAC,CAACD,CAAC,CAACE,eAArB,IAAwC,CAAC,CAACF,CAAC,CAACG,QAAnD;AACD"},"metadata":{},"sourceType":"module"}