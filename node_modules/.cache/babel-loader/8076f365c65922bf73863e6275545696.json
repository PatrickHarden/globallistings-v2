{"ast":null,"code":"import { placeGeocode } from '../../api/google-maps/places';\nimport { restrictionsSelector } from '../selectors/config/config';\nimport { plpLocationNameSelector } from '../selectors/location';\nimport { createRequestPending, createRequestFailure, createRequestSuccess } from '../../types/common/action-creators';\nexport var createGeocodeRequest = createRequestPending('GEOCODE_REQUEST');\nexport var createGeocodeFailure = createRequestFailure('GEOCODE_FAILURE');\nexport var createGeocodeSuccess = createRequestSuccess('GEOCODE_SUCCESS');\nexport var validateUrl = function validateUrl() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var placeName = plpLocationNameSelector(state);\n    var restrictions = restrictionsSelector(state);\n    dispatch(createGeocodeRequest(placeName));\n    return placeGeocode(placeName, restrictions).then(function (place) {\n      dispatch(createGeocodeSuccess(place, placeName));\n    }).catch(function (err) {\n      return dispatch(createGeocodeFailure(err, placeName));\n    });\n  };\n};","map":{"version":3,"names":["placeGeocode","restrictionsSelector","plpLocationNameSelector","createRequestPending","createRequestFailure","createRequestSuccess","createGeocodeRequest","createGeocodeFailure","createGeocodeSuccess","validateUrl","dispatch","getState","state","placeName","restrictions","then","place","catch","err"],"sources":["/Users/zentoo/Code/v2/src/redux/actions/geocode.ts"],"sourcesContent":["import { placeGeocode } from '../../api/google-maps/places';\nimport { State, Geocode } from '../../types/state';\nimport { restrictionsSelector } from '../selectors/config/config';\n\nimport { plpLocationNameSelector } from '../selectors/location';\nimport {\n  createRequestPending,\n  createRequestFailure,\n  createRequestSuccess,\n} from '../../types/common/action-creators';\n\nexport const createGeocodeRequest = createRequestPending('GEOCODE_REQUEST');\nexport const createGeocodeFailure = createRequestFailure('GEOCODE_FAILURE');\nexport const createGeocodeSuccess = createRequestSuccess<Geocode, 'GEOCODE_SUCCESS'>(\n  'GEOCODE_SUCCESS'\n);\n\nexport const validateUrl = () => (dispatch: Function, getState: () => State) => {\n  const state = getState();\n  const placeName = plpLocationNameSelector(state);\n  const restrictions = restrictionsSelector(state);\n\n  dispatch(createGeocodeRequest(placeName));\n\n  return placeGeocode(placeName, restrictions)\n    .then(place => {\n      dispatch(createGeocodeSuccess(place, placeName));\n    })\n    .catch(err => dispatch(createGeocodeFailure(err, placeName)));\n};\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA,SAASC,oBAAT,QAAqC,4BAArC;AAEA,SAASC,uBAAT,QAAwC,uBAAxC;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,oCAJP;AAMA,OAAO,IAAMC,oBAAoB,GAAGH,oBAAoB,CAAC,iBAAD,CAAjD;AACP,OAAO,IAAMI,oBAAoB,GAAGH,oBAAoB,CAAC,iBAAD,CAAjD;AACP,OAAO,IAAMI,oBAAoB,GAAGH,oBAAoB,CACtD,iBADsD,CAAjD;AAIP,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc;EAAA,OAAM,UAACC,QAAD,EAAqBC,QAArB,EAA+C;IAC9E,IAAMC,KAAK,GAAGD,QAAQ,EAAtB;IACA,IAAME,SAAS,GAAGX,uBAAuB,CAACU,KAAD,CAAzC;IACA,IAAME,YAAY,GAAGb,oBAAoB,CAACW,KAAD,CAAzC;IAEAF,QAAQ,CAACJ,oBAAoB,CAACO,SAAD,CAArB,CAAR;IAEA,OAAOb,YAAY,CAACa,SAAD,EAAYC,YAAZ,CAAZ,CACJC,IADI,CACC,UAAAC,KAAK,EAAI;MACbN,QAAQ,CAACF,oBAAoB,CAACQ,KAAD,EAAQH,SAAR,CAArB,CAAR;IACD,CAHI,EAIJI,KAJI,CAIE,UAAAC,GAAG;MAAA,OAAIR,QAAQ,CAACH,oBAAoB,CAACW,GAAD,EAAML,SAAN,CAArB,CAAZ;IAAA,CAJL,CAAP;EAKD,CAZ0B;AAAA,CAApB"},"metadata":{},"sourceType":"module"}